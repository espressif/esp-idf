test cases:
- CI ready: 'Yes'
  ID: TCPIP_TCP_0101
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP -i 0.0.0.0 -p 0
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,OK
      - P SOC1 C +ACCEPT
  - - SSC SSC1 soc -B -t TCP -i 0.0.0.0 -p 0
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock2> -i 123.456.678.789 -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,ERROR
  - - SSC SSC1 soc -C -s <sock2> -i <pc_ip> -p <test_tcp_port2>
    - - P SSC1 RE CONNECT:\d+,ERROR
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK; PC TCP server accept 成功
    4.OK
    5.ERROR
    6.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket，bind到本地ip 0.0.0.0,本地端口 0
    3.target1上使用步骤2创建的socket，去连接 PC的ip，test_tcp_port1
    4.target1上创建TCP socket，bind到本地ip 0.0.0.0,本地端口 0
    5.target1上使用步骤4创建的socket,去连接不存在的ip，test_tcp_port1
    6.target1上使用步骤2创建的socket，去连接 PC的ip，远端端口不存在。
  sub module: TCP
  summary: STA mode, connect test. use different ip, port
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0102
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t TCP -p <random_port>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock1>
    - - R SSC1 RE LISTEN:\d+,OK
  - - SOC SOC1 CONNECT <random_port> <target_ip>
    - - R SSC1 RE ACCEPT:(\d+),\d+,.+,\d+
      - P SOC_COM C OK
  - - SOC SOC1 CONNECT <test_tcp_port2> <target_ip>
    - - P SOC_COM C ERROR
      - P SSC1 NC ACCEPT
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.PC TCP client accept
    4.error
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.target1上创建TCP socket，bind到本地端口<random_port>
    2.target1上使用步骤1创建的socket,创建TCP 监听
    3.PC TCP 连接到target1  <random_port>,<target_ip>
    4.PC tcp 连接到不存在的port ,<target_ip>
  sub module: TCP
  summary: STA mode, server listen test. use different kinds of port
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0103
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SOC SOC2 SEND 5
    - - R SSC1 SL <sock1>+5
  - - SSC SSC1 soc -S -s <sock1> -l 5
    - - P SSC1 RE SEND:\d+,OK
      - P SOC2 RL 5
  - - SSC SSC1 soc -S -s <sock1> -l 1460
    - - P SSC1 RE SEND:\d+,OK
      - P SOC2 RL 1460
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK,pc上回accept
    4.OK
    5.target收到5 byte
    6.PC收到5 byte
    7.OK,PC 回SOC_RECV=SOC2,RECV_LEN=字节数
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |
    1. PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket
    3.target1上使用步骤2创建的socket，去连接 PC的ip，test_tcp_port1
    4.PC与target1 创建好TCP 连接，有ACCEPT
    5.PC send 5 bytes to 8266
    6.8266 send 5 bytes to PC
    7.8266 send 1460 to PC.
  sub module: TCP
  summary: STA mode, send/recv basic test
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0104
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -D -s <sock1> -h B
    - - R SSC1 RE SHUTDOWN:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock2> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -D -s <sock2> -h W
    - - R SSC1 RE SHUTDOWN:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock3>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock3> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -D -s <sock3> -h R
    - - R SSC1 RE SHUTDOWN:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK,pc tcp server accept OK
    4.OK
    5.OK
    6.OK,pc tcp server accept OK
    7.OK
    8.OK
    9.OK,pc tcp server accept OK
    10.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1. PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket
    3.target1上使用步骤2创建的socket，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
    4.target1 shutdown socket1 B
    5.target1上创建TCP socket
    6.target1上使用步骤5创建的socket，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
    7.target1 shutdown socket2 W
    8.target1上创建TCP socket
    9.target1上使用步骤8创建的socket，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
    10.target1 shutdown socket3 R
  sub module: TCP
  summary: STA mode, shutdown basic test
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0105
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  - - SSC SSC1 soc -B -t TCP -p <random_port>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock1>
    - - R SSC1 RE LISTEN:\d+,OK
  - - SOC SOC2 CONNECT <random_port> <target_ip>
    - - R SSC1 A <sock2>:ACCEPT:(\d+),\d+,.+,\d+
  - - SSC SSC1 soc -T -s <sock2>
    - - R SSC1 RE CLOSE:\d+,OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -D -s <sock1>
    - - R SSC1 RE SHUTDOWN:\d+,OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK
    6.OK
    7.target1关闭socket1
    8.target1关闭socket2
    9.OK
    10.OK,pc tcp server accept成功
    11.target1关闭socket1
    12.OK
    13.OK,pc tcp server accept成功
    14.OK
    15.target1关闭socket1
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: "1.PC上建立TCP 监听 test_tcp_port1\n2.target1上创建TCP socket1\n3.target1关闭socket1\n4.target1上创建TCP
    socket 端口随机\n5.target1上使用步骤4创建的socket1，去监听\n6.PC CONNECT<random_port>,<target_ip>
    ,tcp 连接创建成功，创建socket2             \n7.target1关闭socket1\n8.target1关闭socket2\n9.target1上创建TCP
    socket1\n10.target1上使用步骤10创建的socket1，去连接 PC的ip，test_tcp_port1,PC有ACCEPT\n11.target1关闭socket1\n12.target1上创建TCP
    socket1\n13.target1上使用步骤13创建的socket1，去连接 PC的ip，test_tcp_port1,PC有ACCEPT\n14.target1shutdown
    socket1\n15.target1关闭socket1"
  sub module: TCP
  summary: STA mode, close for different types of TCP sockets test
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0106
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock2> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock3>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock3> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock4>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock4> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock5>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock5> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4 OK
    5.OK,pc tcp server accept成功
    6.OK
    7.OK,pc tcp server accept成功
    8 OK
    9.OK,pc tcp server accept成功
    10.OK
    11.OK,pc tcp server accept成功
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket1
    3.target1上使用步骤2创建的socket1，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
    4.target1上创建TCP socket2
    5.target1上使用步骤4创建的socket2，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
    6.target1上创建TCP socket3
    7.target1上使用步骤6创建的socket3，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
    8.target1上创建TCP socket4
    9.target1上使用步骤8创建的socket4，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
    10.target1上创建TCP socket5
    11.target1上使用步骤10创建的socket5，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
  sub module: TCP
  summary: STA mode, create max TCP sockets test
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0107
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t TCP -p <random_port>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock1>
    - - R SSC1 RE LISTEN:\d+,OK
  - - SOC SOC2 CONNECT <random_port> <target_ip>
    - - R SSC1 RE ACCEPT:(\d+),\d+,.+,\d+
  - - SOC SOC3 CONNECT <random_port> <target_ip>
    - - R SSC1 RE ACCEPT:(\d+),\d+,.+,\d+
  - - SOC SOC4 CONNECT <random_port> <target_ip>
    - - R SSC1 RE ACCEPT:(\d+),\d+,.+,\d+
  - - SOC SOC5 CONNECT <random_port> <target_ip>
    - - R SSC1 RE ACCEPT:(\d+),\d+,.+,\d+
  - - SOC SOC6 CONNECT <random_port> <target_ip>
    - - R SSC1 RE ACCEPT:(\d+),\d+,.+,\d+
  execution time: 0.0
  expected result: |-
    1.+BIND:0，OK,0.0.0.0
    2.OK
    3.OK,pc tcp server accept成功
    4.OK,pc tcp server accept成功
    5.OK,pc tcp server accept成功
    6.OK,pc tcp server accept成功
    7.OK,pc tcp server accept成功
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: "1.target1上创建TCP socket 端口随机\n2.target1上使用步骤4创建的socket1，去监听\n3.PC CONNECT<random_port>,<target_ip>
    ,tcp 连接创建成功，创建socket2 \n4.PC CONNECT<random_port>,<target_ip> ,tcp 连接创建成功，创建socket3
    \n5.PC CONNECT<random_port>,<target_ip> ,tcp 连接创建成功，创建socket4 \n6.PC CONNECT<random_port>,<target_ip>
    ,tcp 连接创建成功，创建socket5  \n7.PC CONNECT<random_port>,<target_ip> ,tcp 连接创建成功，创建socket6
    \   "
  sub module: TCP
  summary: STA mode, accept max TCP client by server test
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0108
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -A -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  - - SSC SSC1 soc -B -t TCP -p <random_port>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock1>
    - - R SSC1 RE LISTEN:\d+,OK
  - - SOC SOC2 CONNECT <random_port> <target_ip>
    - - R SSC1 A <sock2>:ACCEPT:(\d+),\d+,.+,\d+
  - - SSC SSC1 soc -A -s <sock2>
    - - R SSC1 RE CLOSE:\d+,OK
  - - SSC SSC1 soc -A -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -A -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.OK
    5.OK
    6.OK
    7.OK
    8.OK
    9.OK
    10.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket1
    3.target1 abort socket1
    4.target1上创建TCP socket 端口随机
    5.target1上使用步骤4创建的socket1，去监听
    6.PC CONNECT<random_port>,<target_ip> ,tcp 连接创建成功，创建socket2
    7.target1 abort socket1
    8.target1 abort socket2
    9.target1上创建TCP socket1
    10.target1上使用步骤10创建的socket1，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
    11.target1 abort socket1
  sub module: TCP
  summary: STA mode, espconn abort test
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0110
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP -i 0.0.0.0 -p 0
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,OK
      - P SOC1 C +ACCEPT
  - - SSC SSC1 soc -B -t TCP -i 0.0.0.0 -p 0
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock2> -i 123.456.678.789 -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,ERROR
  - - SSC SSC1 soc -C -s <sock2> -i <pc_ip_wifi> -p <test_tcp_port2>
    - - P SSC1 RE CONNECT:\d+,ERROR
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK; PC TCP server accept 成功
    4.OK
    5.ERROR
    6.ERROR
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket，bind到本地ip 0.0.0.0,本地端口 0
    3.target1上使用步骤2创建的socket，去连接 PC的ip，test_tcp_port1
    4.target1上创建TCP socket，bind到本地ip 0.0.0.0,本地端口 0
    5.target1上使用步骤4创建的socket,去连接不存在的ip，test_tcp_port1
    6.target1上使用步骤2创建的socket，去连接 PC的ip，远端端口不存在。
  sub module: TCP
  summary: AP mode, connect test. use different ip, port
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0111
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t TCP -p <random_port>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock1>
    - - R SSC1 RE LISTEN:\d+,OK
  - - SOC SOC1 CONNECT <random_port> <target_ap_ip> 0 <pc_ip_wifi>
    - - R SSC1 RE ACCEPT:(\d+),\d+,.+,\d+
      - P SOC_COM C OK
  - - SOC SOC1 CONNECT <test_tcp_port2> <target_ap_ip> 0 <pc_ip_wifi>
    - - P SOC_COM C ERROR
      - P SSC1 NC ACCEPT
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.PC TCP client accept
    4.error
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.target1上创建TCP socket，bind到本地端口<random_port>
    2.target1上使用步骤1创建的socket,创建TCP 监听
    3.PC TCP 连接到target1  <random_port>,<target_ip>
    4.PC tcp 连接到不存在的port ,<target_ip>
  sub module: TCP
  summary: AP mode, server listen test. use different kinds of port
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0112
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SOC SOC2 SEND 5
    - - R SSC1 SL <sock1>+5
  - - SSC SSC1 soc -S -s <sock1> -l 5
    - - P SSC1 RE SEND:\d+,OK
      - P SOC2 RL 5
  - - SSC SSC1 soc -S -s <sock1> -l 1460 -n 100
    - - P SSC1 RE SEND:\d+,OK
      - P SOC2 RL 146000
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.OK
    5.target收到5byte数据
    6.PC收到5byte数据
    7.OK,PC 收到146000 byte数据
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket
    3.target1上使用步骤2创建的socket，去连接PC的ip，test_tcp_port1
    4.PC与target1 创建好TCP 连接，有ACCEPT
    5.PC send 5 bytes to 8266
    6.8266 send 5 bytes to PC
    7.8266 send 100 * 1460 to PC.
  sub module: TCP
  summary: AP mode, send/recv basic test
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0113
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -D -s <sock1> -h B
    - - R SSC1 RE SHUTDOWN:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock2> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -D -s <sock2> -h W
    - - R SSC1 RE SHUTDOWN:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock3>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock3> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -D -s <sock3> -h R
    - - R SSC1 RE SHUTDOWN:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.OK
    5.OK
    6.OK,pc tcp server accept成功
    7.OK
    8.OK
    9.OK,pc tcp server accept成功
    10.OK
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1. PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket
    3.target1上使用步骤2创建的socket，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
    4.target1 shutdown socket1 B
    5.target1上创建TCP socket
    6.target1上使用步骤5创建的socket，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
    7.target1 shutdown socket2 W
    8.target1上创建TCP socket
    9.target1上使用步骤8创建的socket，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
    10.target1 shutdown socket3 R
  sub module: TCP
  summary: AP mode, shutdown basic test
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0114
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  - - SSC SSC1 soc -B -t TCP -p <random_port>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock1>
    - - R SSC1 RE LISTEN:\d+,OK
  - - SOC SOC2 CONNECT <random_port> <target_ap_ip> 0 <pc_ip_wifi>
    - - R SSC1 A <sock2>:ACCEPT:(\d+),\d+,.+,\d+
  - - SSC SSC1 soc -T -s <sock2>
    - - R SSC1 RE CLOSE:\d+,OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -D -s <sock1>
    - - R SSC1 RE SHUTDOWN:\d+,OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK
    6.OK,target1上accept 成功
    7.target1关闭socket1
    8.target1关闭socket2
    9.OK
    10.OK,pc tcp server accept成功
    11.target1关闭socket1
    12.OK
    13.OK,pc tcp server accept成功
    14.OK
    15.target1关闭socket1
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: "1.PC上建立TCP 监听 test_tcp_port1\n2.target1上创建TCP socket1\n3.target1关闭socket1\n4.target1上创建TCP
    socket 端口随机\n5.target1上使用步骤4创建的socket1，去监听\n6.PC CONNECT<random_port>,<target_ip>
    ,tcp 连接创建成功，创建socket2             \n7.target1关闭socket1\n8.target1关闭socket2\n9.target1上创建TCP
    socket1\n10.target1上使用步骤10创建的socket1，去连接 PC的ip，test_tcp_port1,PC有ACCEPT\n11.target1关闭socket1\n12.target1上创建TCP
    socket1\n13.target1上使用步骤13创建的socket1，去连接 PC的ip，test_tcp_port1,PC有ACCEPT\n14.target1shutdown
    socket1\n15.target1关闭socket1"
  sub module: TCP
  summary: AP mode, close for different types of TCP sockets test
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0115
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock2> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock3>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock3> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock4>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock4> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock5>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock5> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4 OK
    5.OK,pc tcp server accept成功
    6.OK
    7.OK,pc tcp server accept成功
    8 OK
    9.OK,pc tcp server accept成功
    10.OK
    11.OK,pc tcp server accept成功
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket1
    3.target1上使用步骤2创建的socket1，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
    4.target1上创建TCP socket2
    5.target1上使用步骤4创建的socket2，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
    6.target1上创建TCP socket3
    7.target1上使用步骤6创建的socket3，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
    8.target1上创建TCP socket4
    9.target1上使用步骤8创建的socket4，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
    10.target1上创建TCP socket5
    11.target1上使用步骤10创建的socket5，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
  sub module: TCP
  summary: AP mode, create max TCP sockets test
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0116
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t TCP -p <random_port>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock1>
    - - R SSC1 RE LISTEN:\d+,OK
  - - SOC SOC2 CONNECT <random_port> <target_ap_ip> 0 <pc_ip_wifi>
    - - R SSC1 RE ACCEPT:(\d+),\d+,.+,\d+
  - - SOC SOC3 CONNECT <random_port> <target_ap_ip> 0 <pc_ip_wifi>
    - - R SSC1 RE ACCEPT:(\d+),\d+,.+,\d+
  - - SOC SOC4 CONNECT <random_port> <target_ap_ip> 0 <pc_ip_wifi>
    - - R SSC1 RE ACCEPT:(\d+),\d+,.+,\d+
  - - SOC SOC5 CONNECT <random_port> <target_ap_ip> 0 <pc_ip_wifi>
    - - R SSC1 RE ACCEPT:(\d+),\d+,.+,\d+
  - - SOC SOC6 CONNECT <random_port> <target_ap_ip> 0 <pc_ip_wifi>
    - - R SSC1 RE ACCEPT:(\d+),\d+,.+,\d+
  execution time: 0.0
  expected result: |-
    1.+BIND:0，OK,0.0.0.0
    2.OK
    3.OK,pc tcp server accept成功
    4.OK,pc tcp server accept成功
    5.OK,pc tcp server accept成功
    6.OK,pc tcp server accept成功
    7.OK,pc tcp server accept成功
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: "1.target1上创建TCP socket 端口随机\n2.target1上使用步骤4创建的socket1，去监听\n3.PC CONNECT<random_port>,<target_ip>
    ,tcp 连接创建成功，创建socket2 \n4.PC CONNECT<random_port>,<target_ip> ,tcp 连接创建成功，创建socket3
    \n5.PC CONNECT<random_port>,<target_ip> ,tcp 连接创建成功，创建socket4 \n6.PC CONNECT<random_port>,<target_ip>
    ,tcp 连接创建成功，创建socket5  \n7.PC CONNECT<random_port>,<target_ip> ,tcp 连接创建成功，创建socket6
    \   "
  sub module: TCP
  summary: AP mode, accept max TCP client by server test
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0201
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -i 0.0.0.0 -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,ERROR
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock2>
    - - R SSC1 RE LISTEN:\d+,OK
  - - SSC SSC1 soc -C -s <sock2> -i <pc_ip> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,ERROR
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock3>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock3> -i <pc_ip> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -D -s <sock3> -h B
    - - P SSC1 RE SHUTDOWN:\d+,OK
  - - SSC SSC1 soc -C -s <sock3> -i <pc_ip> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,ERROR
  - - SSC SSC1 soc -T
    - - R SSC1 C +CLOSEALL
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,ERROR
  execution time: 0.0
  expected result: |-
    1.ok
    2.OK
    3.ERROR
    4.OK
    5.OK
    6.ERROR
    7.OK
    8.OK
    9.OK
    10.OK
    11.OK
    12.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建UDP传输socket，bind到本地ip 0.0.0.0,<test_udp_port1>
    3.target1上使用步骤2创建的socket，去连接 PC的ip，<test_udp_port1>
    4.target1上创建TCP socket
    5.target1上使用步骤4创建的socket,创建TCP 监听
    6.target1上使用步骤4创建的socket，去连接 PC的ip，<test_tcp_port1>
    7.target1上创建TCP socket
    8.target1上使用步骤7创建的socket，去连接 PC的ip，<test_tcp_port1>
    9.target1上关闭步骤7创建的socket
    10.target1上使用步骤7创建的socket，去连接 PC的ip，<test_tcp_port1>
    11.target1上关闭所有创建的socket
    12.target1上使用步骤2创建的socket，去连接 PC的ip，<test_tcp_port1>
  sub module: TCP
  summary: STA mode, connect test. use socket in state that can't connect
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) in different state
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0202
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock1>
    - - R SSC1 RE LISTEN:\d+,ERROR
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock2> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -L -s <sock2>
    - - R SSC1 RE LISTEN:\d+,ERROR
  - - SSC SSC1 soc -D -s <sock2>
    - - R SSC1 RE SHUTDOWN:\d+,OK
  - - SSC SSC1 soc -L -s <sock2>
    - - R SSC1 RE LISTEN:\d+,ERROR
  - - SSC SSC1 soc -L -s 1000
    - - R SSC1 RE LISTEN:\d+,ERROR
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.ERROR
    4.OK
    5.OK
    6.ERROR
    7.OK
    8.ERROR
    9.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建UDP传输socket，bind到本地ip 0.0.0.0,<test_udp_port1>
    3.target1上使用步骤2创建的socket，去建立TCP 监听
    4.target1上创建TCP socket
    5.target1上使用步骤4创建的socket，去连接 PC的ip，<test_tcp_port1>
    6.target1上使用步骤4创建的socket,创建TCP 监听
    7.target1上shutdown 步骤4的socket
    8.target1上使用步骤4创建的socket,创建TCP 监听
    9.target1上使用不存在socket,创建TCP 监听
  sub module: TCP
  summary: STA mode, server listen test. use socket in state that can't listen
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) in different state
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0203
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock1>
    - - R SSC1 RE SEND:\d+,ERROR
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock2>
    - - R SSC1 RE SEND:\d+,ERROR
  - - SSC SSC1 soc -C -s <sock2> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -D -s <sock2>
    - - R SSC1 RE SHUTDOWN:\d+,OK
  - - SSC SSC1 soc -S -s <sock2>
    - - R SSC1 RE SEND:\d+,ERROR
  - - SSC SSC1 soc -S -s 1000
    - - R SSC1 RE SEND:\d+,ERROR
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.ERROR
    4.OK
    5.ERROR
    6.OK
    7.OK
    8.ERROR
    9.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建UDP传输socket1，<test_udp_port1>
    3.target1上使用步骤2创建的socket1，去发送数据
    4.target1上创建TCP socket2
    5.target1上使用步骤4创建的socket2，去发送数据
    6.target1上使用步骤4创建的socket2,创建TCP连接，连接成功
    7.target1上shutdown 步骤4的socket2
    8.target1往socket2发送错误命令发送数据
    9.target1上不指定socket往上发送数据
  sub module: TCP
  summary: send test. use socket in state that can't send
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) in different state
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0204
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP -w 0
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SOC SOC2 SEND 146000
    - - P SOC_COM R *
  - - SSC SSC1 soc -W -s <sock1> -o 1
    - - P SSC1 RE WORKTHREAD:\d+,OK
      - P SSC1 SL <sock1>+2920
  execution time: 0.0
  expected result: |
    1.OK
    2.OK
    3.OK,pc server accept OK
    4.OK
    5.OK
    6.OK
    7.target收到146000 byte
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1. PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket
    3.target1上使用步骤2创建的socket，去连接 PC的ip，test_tcp_port1
    4.PC与target1 创建好TCP 连接，有ACCEPT
    5.target上不进行recv
    6.PC send 100 * 1460 data to target,
    7.在target上开始recv
  sub module: TCP
  summary: STA mode, TCP recv buffer test
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) in different state
  version: v2 (2016-10-19)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0206
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP -i <target_ip>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -B -t TCP -i <target_ip>
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock2> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -D -s <sock2>
    - - R SSC1 RE SHUTDOWN:\d+,OK
  - - SSC SSC1 soc -B -t TCP -p <random_port>
    - - R SSC1 A <sock3>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock3>
    - - R SSC1 RE LISTEN:\d+,OK
  - - SOC SOC2 CONNECT <random_port> <target_ip>
    - - R SSC1 A <sock4>:ACCEPT:(\d+),\d+,.+,\d+
  - - SSC SSC1 soc -I
    - - P SSC1 RE "SOCINFO:%%s,2,%%s,\d+,%%s,%%d"%%(<sock1>,<target_ip>,<pc_ip>,<test_tcp_port1>)
      - P SSC1 RE "SOCINFO:%%s,82,.+,%%d"%%(<sock3>,<random_port>)
      - P SSC1 RE "SOCINFO:%%s,2,%%s,%%d,%%s,\d+"%%(<sock4>,<target_ip>,<random_port>,<pc_ip>)
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.OK
    5.OK
    6.OK
    7.OK
    8.OK
    9.PC OK, target1 +ACCEPT:3,2,<pc_ip>,port
    10.+SOCINFO:<sock1>,<target_ip>,<pc_ip>,<test_tcp_port1>
    +SOCINFO:<sock2>,<target_ip>,<pc_ip>,<test_tcp_port1>
    +SOCINFO:<sock3>,<random_port>
    +SOCINFO:<sock4>,<target_ip>,<random_port>,<pc_ip>
    +SOCINF0ALL
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: "1.PC上建立TCP 监听 test_tcp_port1\n2.target1上创建TCP socket1,本地ip target_ip\n3.target1上使用步骤2创建的socket1，去连接
    PC的ip，test_tcp_port1,PC有ACCEPT\n4.target1上创建TCP socket2,本地ip target_ip\n5.target1上使用步骤4创建的socket2，去连接
    PC的ip，test_tcp_port1,PC有ACCEPT\n6.target1 shutdown socket2 \n7.target1上创建TCP socket3,本地端口random_port\n8.target1上使用步骤7创建的socket3，去监听\n9.PC
    CONNECT<random_port>,<target_ip> ,tcp 连接创建成功，创建socket4  \n10.target1 查询the socket
    information"
  sub module: TCP
  summary: STA mode, TCP get active socket info test
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) in different state
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0207
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -i 0.0.0.0 -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,ERROR
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock2>
    - - R SSC1 RE LISTEN:\d+,OK
  - - SSC SSC1 soc -C -s <sock2> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,ERROR
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock3>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock3> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -D -s <sock3> -h B
    - - P SSC1 RE SHUTDOWN:\d+,OK
  - - SSC SSC1 soc -C -s <sock3> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,ERROR
  - - SSC SSC1 soc -T
    - - R SSC1 C +CLOSEALL
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,ERROR
  execution time: 0.0
  expected result: |-
    1.ok
    2 OK
    3.ERROR
    4.OK
    5.OK
    6.ERROR
    7.OK
    8.OK
    9.OK
    10.OK
    11.OK
    12.ERROR
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建UDP传输socket，bind到本地ip 0.0.0.0,<test_udp_port1>
    3.target1上使用步骤2创建的socket，去连接 PC的ip，<test_udp_port1>
    4.target1上创建TCP socket
    5.target1上使用步骤4创建的socket,创建TCP 监听
    6.target1上使用步骤4创建的socket，去连接 PC的ip，<test_tcp_port1>
    7.target1上创建TCP socket
    8.target1上使用步骤7创建的socket，去连接 PC的ip，<test_tcp_port1>
    9.target1上关闭步骤7创建的socket
    10.target1上使用步骤7创建的socket，去连接 PC的ip，<test_tcp_port1>
    11.target1上关闭所有创建的socket
    12.target1上使用步骤2创建的socket，去连接 PC的ip，<test_tcp_port1>
  sub module: TCP
  summary: AP mode, connect test. use socket in state that can't connect
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) in different state
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0208
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock1>
    - - R SSC1 RE LISTEN:\d+,ERROR
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock2> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -L -s <sock2>
    - - R SSC1 RE LISTEN:\d+,ERROR
  - - SSC SSC1 soc -D -s <sock2>
    - - R SSC1 RE SHUTDOWN:\d+,OK
  - - SSC SSC1 soc -L -s <sock2>
    - - R SSC1 RE LISTEN:\d+,ERROR
  - - SSC SSC1 soc -L -s 1000
    - - R SSC1 RE LISTEN:\d+,ERROR
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.ERROR
    4 OK
    5.OK
    6.ERROR
    7.OK
    8.ERROR
    9.ERROR
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建UDP传输socket，bind到本地ip 0.0.0.0,<test_udp_port1>
    3.target1上使用步骤2创建的socket，去建立TCP 监听
    4.target1上创建TCP socket
    5.target1上使用步骤4创建的socket，去连接 PC的ip，<test_tcp_port1>
    6.target1上使用步骤4创建的socket,创建TCP 监听
    7.target1上shutdown 步骤4的socket
    8.target1上使用步骤4创建的socket,创建TCP 监听
    9.target1上使用不存在socket,创建TCP 监听
  sub module: TCP
  summary: AP mode, server listen test. use socket in state that can't listen
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) in different state
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0210
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP -w 0
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SOC SOC2 SEND 146000
    - - P SOC_COM R *
  - - SSC SSC1 soc -W -s <sock1> -o 1
    - - P SSC1 RE WORKTHREAD:\d+,OK
      - P SSC1 SL <sock1>+2920
  execution time: 0.0
  expected result: |
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.OK
    6.OK
    7.收到 146000 数据
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1. PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket
    3.target1上使用步骤2创建的socket，去连接 PC的ip，test_tcp_port1
    4.PC与target1 创建好TCP 连接，有ACCEPT
    5.target停止调用recv
    6.PC send 100 * 1460 data to 8266,
    7.target重新调用recv
  sub module: TCP
  summary: AP mode, TCP recv buffer test
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) in different state
  version: v2 (2016-10-19)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0212
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP -i <target_ap_ip>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -B -t TCP -i <target_ap_ip>
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock2> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -D -s <sock2>
    - - R SSC1 RE SHUTDOWN:\d+,OK
  - - SSC SSC1 soc -B -t TCP -p <random_port>
    - - R SSC1 A <sock3>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock3>
    - - R SSC1 RE LISTEN:\d+,OK
  - - SOC SOC2 CONNECT <random_port> <target_ap_ip> 0 <pc_ip_wifi>
    - - R SSC1 A <sock4>:ACCEPT:(\d+),\d+,.+,\d+
  - - SSC SSC1 soc -I
    - - P SSC1 RE "SOCINFO:%%s,2,%%s,\d+,%%s,%%d"%%(<sock1>,<target_ap_ip>,<pc_ip_wifi>,<test_tcp_port1>)
      - P SSC1 RE "SOCINFO:%%s,82,.+,%%d"%%(<sock3>,<random_port>)
      - P SSC1 RE "SOCINFO:%%s,2,%%s,%%d,%%s,\d+"%%(<sock4>,<target_ap_ip>,<random_port>,<pc_ip_wifi>)
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.OK
    5.OK
    6.OK
    7.OK
    8.OK
    9.PC OK, target1 +ACCEPT:3,2,<pc_ip>,port
    10.+SOCINFO:<sock1>,<target_ip>,<pc_ip>,<test_tcp_port1>
    +SOCINFO:<sock2>,<target_ip>,<pc_ip>,<test_tcp_port1>
    +SOCINFO:<sock3>,<random_port>
    +SOCINFO:<sock4>,<target_ip>,<random_port>,<pc_ip>
    +SOCINF0ALL
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: "1.PC上建立TCP 监听 test_tcp_port1\n2.target1上创建TCP socket1,本地ip target_ip\n3.target1上使用步骤2创建的socket1，去连接
    PC的ip，test_tcp_port1,PC有ACCEPT\n4.target1上创建TCP socket2,本地ip target_ip\n5.target1上使用步骤4创建的socket2，去连接
    PC的ip，test_tcp_port1,PC有ACCEPT\n6.target1 shutdown socket2 \n7.target1上创建TCP socket3,本地端口random_port\n8.target1上使用步骤7创建的socket3，去监听\n9.PC
    CONNECT<random_port>,<target_ip> ,tcp 连接创建成功，创建socket4  \n10.target1 查询the socket
    information"
  sub module: TCP
  summary: AP mode, TCP get active socket info test
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) in different state
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0213
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -A -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  - - SSC SSC1 soc -B -t TCP -p <random_port>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock1>
    - - R SSC1 RE LISTEN:\d+,OK
  - - SOC SOC2 CONNECT <random_port> <target_ap_ip> 0 <pc_ip_wifi>
    - - R SSC1 A <sock2>:ACCEPT:(\d+),\d+,.+,\d+
  - - SSC SSC1 soc -A -s <sock2>
    - - R SSC1 RE CLOSE:\d+,OK
  - - SSC SSC1 soc -A -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -A -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.OK
    5.OK
    6.OK
    7.OK
    8.OK
    9.OK
    10.ERROR
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket1
    3.target1 abort socket1
    4.target1上创建TCP socket 端口随机
    5.target1上使用步骤4创建的socket1，去监听
    6.PC CONNECT<random_port>,<target_ip> ,tcp 连接创建成功，创建socket2
    7.target1 abort socket1
    8.target1 abort socket2
    9.target1上创建TCP socket1
    10.target1上使用步骤10创建的socket1，去连接 PC的ip，test_tcp_port1,PC有ACCEPT
    11.target1 abort socket1
  sub module: TCP
  summary: AP mode, espconn abort test
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: use TCP SAP (socket/espconn API) in different state
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0301
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 lev -N -t GET
    - - R SSC1 RE NUMBER:\d+,OK
  execution time: 0.0
  expected result: 1.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: 1.lev -N -t GET
  sub module: TCP
  summary: STA mode, max connections number query
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket option test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0302
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 lev -N -t SET -n 2
    - - R SSC1 C +NUMBER:OK
  - - SSC SSC1 lev -N -t SET -n 0
    - - R SSC1 C +NUMBER:ERROR
  - - SSC SSC1 lev -N -t SET -n 16
    - - R SSC1 C +NUMBER:ERROR
  - - SSC SSC1 lev -N -t SET -n 15
    - - R SSC1 C +NUMBER:OK
  - - SSC SSC1 lev -N -t SET -n 8
    - - R SSC1 C +NUMBER:OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.ERROR
    3.ERROR
    4.OK
    5.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.lev -N -t SET -n 2
    2.lev -N -t SET -n 0
    3.lev -N -t SET -n 15
    4.lev -N -t SET -n 16
    5.lev -N -t SET -n 8
  sub module: TCP
  summary: STA mode, max connections number set
  test environment: SSC_T1_5
  test point 1: basic function
  test point 2: socket option test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0303
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SSC SSC1 lev -N -t SET -n 3
    - - R SSC1 C +NUMBER:OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock2> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC3
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock3>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock3> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC4
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock4>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock4> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,ERROR
  - - SSC SSC1 soc -T
    - - R SSC1 C +CLOSE
  - - SSC SSC1 lev -N -t SET -n 8
    - - R SSC1 C +NUMBER:OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.OK
    5.OK
    6.OK
    7.OK
    8.OK
    9.OK
    10.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket1,本地ip target_ip
    3.target1上使用步骤2创建的socket1，去连接 pc_ip的ip，test_tcp_port1,PC有ACCEPT
    4.lev -N -t SET -n 3
    5.target1上创建TCP socket3,本地端口random_port
    6.target1上使用步骤5创建的socket2，去连接 pc_ip_wifi的ip，test_tcp_port1,PC有ACCEPT
    7.target1上创建TCP socket3,本地端口random_port
    8.target1上使用步骤7创建的socket3，去连接 pc_ip_wifi的ip，test_tcp_port1,PC有ACCEPT
    9.target1上创建TCP socket4,本地端口random_port
    10.target1上使用步骤5创建的socket4，去连接 pc_ip_wifi的ip，test_tcp_port1,未连接成功
  sub module: TCP
  summary: STA mode, max connections fucntion verify
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket option test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0304
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SOC SOC2 SEND 5
    - - R SSC1 SL <sock1>+5
  - - SSC SSC1 soc -S -s <sock1> -l 5
    - - P SSC1 RE SEND:\d+,OK
      - P SOC2 RL 5
  - - SSC SSC1 lev -N -t SET -n 3
    - - R SSC1 C +NUMBER:OK
  - - SOC SOC2 SEND 146000
    - - R SSC1 SL <sock1>+146000
  - - SSC SSC1 soc -S -s <sock1> -l 1460 -n 100
    - - P SSC1 RE SEND:\d+,OK
      - P SOC2 RL 146000
  - - SSC SSC1 lev -N -t SET -n 8
    - - R SSC1 C +NUMBER:OK
  execution time: 0.0
  expected result: |
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.OK
    5.OK
    6.OK
    7.OK
    8.OK
    9.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket1,本地ip target_ip
    3.target1上使用步骤2创建的socket1，去连接 pc_ip的ip，test_tcp_port1,PC有ACCEPT
    4.PC 往8266发送数据
    5.8266往PC 发送数据
    6.lev -N -t SET -n 3
    7.PC 往8266发送数据 146000
    8.8266往PC 发送数据1460*100
    9.target1上lev -N -t SET -n 8
  sub module: TCP
  summary: STA mode, max connections set interact with TCP connect and send
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket option test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0305
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t TCP -p <random_port>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock1>
    - - R SSC1 RE LISTEN:\d+,OK
  - - SOC SOC1 CONNECT <random_port> <target_ip>
    - - R SSC1 A <sock2>:ACCEPT:(\d+),\d+,.+,\d+
      - P SOC_COM C OK
  - - SSC SSC1 lev -A -s <sock1> -t GET
    - - 'R SSC1 RE ALLOW:'
  - - SSC SSC1 lev -A -s <sock1> -t SET -n 4
    - - R SSC1 RE ALLOW:\d+,OK
  execution time: 0.0
  expected result: |
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.ERROR
    5.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket1,本地ip target_ip
    3.target1上使用步骤2创建的socket1，去连接 pc_ip的ip，test_tcp_port1,PC有ACCEPT
    4.lev -A -s <sock1> -t GET
    5.target1上lev -A -s <sock1> -t SET -n 4
  sub module: TCP
  summary: STA mode, max TCP connection allowed by server test
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket option test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0306
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t TCP -p <random_port>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock1>
    - - R SSC1 RE LISTEN:\d+,OK
  - - SOC SOC1 CONNECT <random_port> <target_ip>
    - - R SSC1 A <sock2>:ACCEPT:(\d+),\d+,.+,\d+
      - P SOC_COM C OK
  - - 'SSC SSC1 lev -K -s <sock2> -t ENABLE '
    - - R SSC1 RE KEEPALIVE:\d+,OK
  - - 'SSC SSC1 lev -K -s <sock2> -t GET '
    - - R SSC1 RE KEEPALIVE:\d+,OK
  - - SSC SSC1 lev -K -s <sock2> -t SET -i 30 -d 3 -c 2
    - - R SSC1 RE KEEPALIVE:\d+,OK
  - - DELAY 30
    - - P SOC_COM NC SOC_CLOSED
  execution time: 0.0
  expected result: |
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.OK
    5.OK
    6.OK
    7.SOC_COM NC SOC_CLOSED
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: "1.PC上建立TCP 监听 test_tcp_port1\n2.target1上创建TCP socket1,本地ip target_ip\n3.target1上使用步骤2创建的socket1，去连接
    pc_ip的ip，test_tcp_port1,PC有ACCEPT\n4.lev -K -s <sock1> -t ENABLE \n5.target1上lev
    -K -s <sock1> -t GET \n6.lev -K -s <sock1> -t SET -i 30 -d 3 -c 2\n7.等待30s"
  sub module: TCP
  summary: STA mode, keep alive test
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket option test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0307
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t TCP -p <random_port>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock1>
    - - R SSC1 RE LISTEN:\d+,OK
  - - SOC SOC1 CONNECT <random_port> <target_ip>
    - - R SSC1 A <sock2>:ACCEPT:(\d+),\d+,.+,\d+
      - R SOC_COM L OK
  - - 'SSC SSC1 lev -K -s <sock2> -t ENABLE '
    - - R SSC1 RE KEEPALIVE:\d+,OK
  - - 'SSC SSC1 lev -K -s <sock2> -t GET '
    - - R SSC1 RE KEEPALIVE:\d+,OK
  - - SSC SSC1 lev -K -s <sock2> -t SET -i 30 -d 3 -c 2
    - - R SSC1 RE KEEPALIVE:\d+,OK
  - - SOC SOC1 SEND 5
    - - R SSC1 SL <sock2>+5
  - - SSC SSC1 soc -S -s <sock2> -l 5
    - - P SSC1 RE SEND:\d+,OK
      - P SOC1 RL 5
  - - SOC SOC1 SEND 146000
    - - R SSC1 SL <sock2>+146000
  - - SSC SSC1 soc -S -s <sock2> -l 1460 -n 100
    - - P SSC1 RE SEND:\d+,OK
      - P SOC1 RL 146000
  - - DELAY 30
    - - P SOC_COM NC SOC_CLOSED
  execution time: 0.0
  expected result: |
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.OK
    5.OK
    6.OK
    7.0K
    8.OK
    9.OK
    10.OK
    11.SOC_COM NC SOC_CLOSED
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: "1.PC上建立TCP 监听 test_tcp_port1\n2.target1上创建TCP socket1,本地ip target_ip\n3.target1上使用步骤2创建的socket1，去连接
    pc_ip的ip，test_tcp_port1,PC有ACCEPT\n4.lev -K -s <sock1> -t ENABLE \n5.target1上lev
    -K -s <sock1> -t GET \n6.lev -K -s <sock1> -t SET -i 30 -d 3 -c 2\n7.PC往8266发送数据\n8.8266往PC上发送数据\n9.PC往8266发送146000数据\n10.8266往PC上发送1460*100数据\n11.等待30s"
  sub module: TCP
  summary: STA mode, keep alive interact with TCP send
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket option test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0308
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 lev -N -t GET
    - - R SSC1 RE NUMBER:\d+,OK
  execution time: 0.0
  expected result: 1.OK
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: 1.lev -N -t GET
  sub module: TCP
  summary: AP mode, max connections number query
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: socket option test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0309
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 lev -N -t SET -n 2
    - - R SSC1 C +NUMBER:OK
  - - SSC SSC1 lev -N -t SET -n 0
    - - R SSC1 C +NUMBER:ERROR
  - - SSC SSC1 lev -N -t SET -n 16
    - - R SSC1 C +NUMBER:ERROR
  - - SSC SSC1 lev -N -t SET -n 15
    - - R SSC1 C +NUMBER:OK
  - - SSC SSC1 lev -N -t SET -n 8
    - - R SSC1 C +NUMBER:OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.ERROR
    3.ERROR
    4.OK
    5.OK
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.lev -N -t SET -n 2
    2.lev -N -t SET -n 0
    3.lev -N -t SET -n 15
    4.lev -N -t SET -n 16
    5.lev -N -t SET -n 8
  sub module: TCP
  summary: AP mode, max connections number set
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: socket option test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0310
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP -i 0.0.0.0 -p 0
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SSC SSC1 lev -N -t SET -n 3
    - - R SSC1 C +NUMBER:OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock2> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC3
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock3>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock3> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC4
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock4>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock4> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,ERROR
  - - SSC SSC1 soc -T
    - - R SSC1 C +CLOSE
  - - SSC SSC1 lev -N -t SET -n 8
    - - R SSC1 C +NUMBER:OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.OK
    5.OK
    6.OK
    7.OK
    8.OK
    9.OK
    10.ERROR
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket1,本地ip target_ip
    3.target1上使用步骤2创建的socket1，去连接 pc_ip_wifi的ip，test_tcp_port1,PC有ACCEPT
    4.lev -N -t SET -n 3
    5.target1上创建TCP socket3,本地端口random_port
    6.target1上使用步骤5创建的socket2，去连接 pc_ip_wifi的ip，test_tcp_port1,PC有ACCEPT
    7.target1上创建TCP socket3,本地端口random_port
    8.target1上使用步骤7创建的socket3，去连接 pc_ip_wifi的ip，test_tcp_port1,PC有ACCEPT
    9.target1上创建TCP socket4,本地端口random_port
    10.target1上使用步骤5创建的socket4，去连接 pc_ip_wifi的ip，test_tcp_port1,未连接成功
  sub module: TCP
  summary: AP mode, max connections fucntion verify
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: socket option test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0311
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP -i 0.0.0.0 -p 0
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SOC SOC2 SEND 5
    - - R SSC1 SL <sock1>+5
  - - SSC SSC1 soc -S -s <sock1> -l 5
    - - P SSC1 RE SEND:\d+,OK
      - P SOC2 RL 5
  - - SSC SSC1 lev -N -t SET -n 3
    - - R SSC1 C +NUMBER:OK
  - - SOC SOC2 SEND 146000
    - - R SSC1 SL <sock1>+146000
  - - SSC SSC1 soc -S -s <sock1> -l 1460 -n 100
    - - P SSC1 RE SEND:\d+,OK
      - P SOC2 RL 146000
  - - SSC SSC1 lev -N -t SET -n 8
    - - R SSC1 C +NUMBER:OK
  execution time: 0.0
  expected result: |
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.OK
    5.OK
    6.OK
    7.OK
    8.OK
    9.OK
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket1,本地ip target_ip
    3.target1上使用步骤2创建的socket1，去连接 pc_ip_wifi的ip，test_tcp_port1,PC有ACCEPT
    4.PC 往8266发送数据
    5.8266往PC 发送数据
    6.lev -N -t SET -n 3
    7.PC 往8266发送数据 146000
    8.8266往PC 发送数据1460*100
    9.target1上lev -N -t SET -n 8
  sub module: TCP
  summary: AP mode, max connections set interact with TCP connect and send
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: socket option test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0312
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP -i 0.0.0.0 -p 0
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SSC SSC1 lev -A -s <sock1> -t GET
    - - R SSC1 RE ALLOW:\d+,ERROR
  - - SSC SSC1 lev -A -s <sock1> -t SET -n 4
    - - R SSC1 RE ALLOW:\d+,ERROR
  execution time: 0.0
  expected result: |
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.ERROR
    5.ERROR
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket1,本地ip target_ip
    3.target1上使用步骤2创建的socket1，去连接 pc_ip_wifi的ip，test_tcp_port1,PC有ACCEPT
    4.lev -A -s <sock1> -t GET
    5.target1上lev -A -s <sock1> -t SET -n 4
  sub module: TCP
  summary: AP mode, max TCP connection allowed by server test
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: socket option test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0313
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP -i 0.0.0.0 -p 0
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - 'SSC SSC1 lev -K -s <sock1> -t ENABLE '
    - - R SSC1 RE KEEPALIVE:\d+,OK
  - - 'SSC SSC1 lev -K -s <sock1> -t GET '
    - - R SSC1 RE KEEPALIVE:\d+,OK
  - - SSC SSC1 lev -K -s <sock1> -t SET -i 30 -d 3 -c 2
    - - R SSC1 RE KEEPALIVE:\d+,OK
  - - DELAY 30
    - - P SOC_COM NC SOC_CLOSED
  execution time: 0.0
  expected result: |
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.OK
    5.OK
    6.OK
    7.SOC_COM NC SOC_CLOSED
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: "1.PC上建立TCP 监听 test_tcp_port1\n2.target1上创建TCP socket1,本地ip target_ip\n3.target1上使用步骤2创建的socket1，去连接
    pc_ip_wifi的ip，test_tcp_port1,PC有ACCEPT\n4.lev -K -s <sock1> -t ENABLE \n5.target1上lev
    -K -s <sock1> -t GET \n6.lev -K -s <sock1> -t SET -i 30 -d 3 -c 2\n7.等待30s"
  sub module: TCP
  summary: AP mode, keep alive test
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: socket option test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0314
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP -i 0.0.0.0 -p 0
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip_wifi> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - 'SSC SSC1 lev -K -s <sock1> -t ENABLE '
    - - R SSC1 RE KEEPALIVE:\d+,OK
  - - 'SSC SSC1 lev -K -s <sock1> -t GET '
    - - R SSC1 RE KEEPALIVE:\d+,OK
  - - SSC SSC1 lev -K -s <sock1> -t SET -i 30 -d 3 -c 2
    - - R SSC1 RE KEEPALIVE:\d+,OK
  - - SOC SOC2 SEND 5
    - - R SSC1 SL <sock1>+5
  - - SSC SSC1 soc -S -s <sock1> -l 5
    - - P SSC1 RE SEND:\d+,OK
      - P SOC2 RL 5
  - - SOC SOC2 SEND 146000
    - - R SSC1 SL <sock1>+146000
  - - SSC SSC1 soc -S -s <sock1> -l 1460 -n 100
    - - P SSC1 RE SEND:\d+,OK
      - P SOC2 RL 146000
  - - DELAY 30
    - - P SOC_COM NC SOC_CLOSED
  execution time: 0.0
  expected result: |
    1.OK
    2.OK
    3.OK,pc tcp server accept成功
    4.OK
    5.OK
    6.OK
    7.0K
    8.OK
    9.OK
    10.OK
    11.SOC_COM NC SOC_CLOSED
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: "1.PC上建立TCP 监听 test_tcp_port1\n2.target1上创建TCP socket1,本地ip target_ip\n3.target1上使用步骤2创建的socket1，去连接
    pc_ip_wifi的ip，test_tcp_port1,PC有ACCEPT\n4.lev -K -s <sock1> -t ENABLE \n5.target1上lev
    -K -s <sock1> -t GET \n6.lev -K -s <sock1> -t SET -i 30 -d 3 -c 2\n7.PC往8266发送数据\n8.8266往PC上发送数据\n9.PC往8266发送146000数据\n10.8266往PC上发送1460*100数据\n11.等待30s"
  sub module: TCP
  summary: AP mode, keep alive interact with TCP send
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: socket option test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0401
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SSC SSC1 sta -D
    - - P SSC1 C +QAP:OK
  - - SSC SSC1 soc -S -s <sock1> -l 5
    - - P SSC1 RE SEND:\d+,ERROR
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK; PC TCP server accept 成功
    4.OK
    5.OK
    6.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket1
    3.target1上使用步骤2创建的socket1，去连接 PC的ip，test_tcp_port1
    4.PC与target1创建好TCP 连接，有ACCEPT
    5.断开与AP 连接
    6.8266往PC上发送5字节数据
  sub module: TCP
  summary: do TCP send after WIFI disconnected
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: TCP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0402
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SSC SSC1 sta -D
    - - P SSC1 C +QAP:OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK; PC TCP server accept 成功
    4.OK
    5.OK
    6.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket1
    3.target1上使用步骤2创建的socket1，去连接 PC的ip，test_tcp_port1
    4.PC与target1创建好TCP 连接，有ACCEPT
    5.断开与AP 连接
    6.关闭建立的socket1连接
  sub module: TCP
  summary: "close TCP socket after WIFI \ndisconnected"
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: TCP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0403
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SSC SSC1 op -S -o 2
    - - P SSC1 C +MODE:OK
  - - SSC SSC1 soc -S -s <sock1> -l 5
    - - P SSC1 RE SEND:\d+,ERROR
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK; PC TCP server accept 成功
    4.OK
    5.OK
    6.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: "1.PC上建立TCP 监听 test_tcp_port1\n2.target1上创建TCP socket1\n3.target1上使用步骤2创建的socket1，去连接
    PC的ip，test_tcp_port1\n4.PC与target1创建好TCP 连接，有ACCEPT\n5.修改8266的Mode为softAP mode
    \n6.8266往PC上发送5字节数据"
  sub module: TCP
  summary: do TCP send after mode changed
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: TCP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0404
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SSC SSC1 op -S -o 2
    - - P SSC1 C +MODE:OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK; PC TCP server accept 成功
    4.OK
    5.OK
    6.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: "1.PC上建立TCP 监听 test_tcp_port1\n2.target1上创建TCP socket1\n3.target1上使用步骤2创建的socket1，去连接
    PC的ip，test_tcp_port1\n4.PC与target1创建好TCP 连接，有ACCEPT\n5.修改8266的Mode为softAP mode
    \n6.关闭建立的socket1连接"
  sub module: TCP
  summary: close TCP socket after mode changed
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: TCP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0405
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - NIC <pc_nic> DISABLED
    - - R PC_COM C OK
  - - SSC SSC1 soc -S -s <sock1> -l 1
    - - ''
  - - DELAY 5400
    - - P SSC1 RE CLOSED:\d+,0
  execution time: 1.5
  expected result: |-
    1.OK
    2.OK
    3.OK; PC TCP server accept 成功
    4.OK
    5.OK
    6.TCP连接断开
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket1
    3.target1上使用步骤2创建的socket1，去连接 PC的ip，test_tcp_port1
    4.PC与target1创建好TCP 连接，有ACCEPT
    5.PC 网卡 disable
    6.target1上使用socket1发送数据，等待 90 分钟
  sub module: TCP
  summary: do TCP send after PC NIC disabled
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: TCP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0406
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - NIC <pc_nic> DISABLED
    - - R PC_COM C OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK; PC TCP server accept 成功
    4.OK
    5.OK
    6.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: "1.PC上建立TCP 监听 test_tcp_port1\n2.target1上创建TCP socket1\n3.target1上使用步骤2创建的socket1，去连接
    PC的ip，test_tcp_port1\n4.PC与target1创建好TCP 连接，有ACCEPT\n5.PC上网卡禁止掉 \n6.关闭建立的socket1连接"
  sub module: TCP
  summary: close TCP socket after PC NIC disabled
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: TCP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0407
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: '1/2'
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SSC SSC1 dhcp -E -o 1
    - - R SSC1 C +DHCP:STA,OK
  - - SSC SSC1 ip -S -o 1 -i 192.168.111.210
    - - P SSC1 C +IP:OK
  - - SSC SSC1 ip -Q -o 1
    - - R SSC1 C +STAIP:192.168.111.210
  - - SSC SSC1 soc -S -s <sock1> -l 5
    - - P SSC1 RE SEND:\d+,ERROR
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK; PC TCP server accept 成功
    4.OK
    5.OK
    6.OK
    7.OK
    8.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: "1.PC上建立TCP 监听 test_tcp_port1\n2.target1上创建TCP socket1\n3.target1上使用步骤2创建的socket1，去连接
    PC的ip，test_tcp_port1\n4.PC与target1创建好TCP 连接，有ACCEPT\n5.关闭8266的DHCP 1\n6.设置sta
    ip \n7.查询sta ip 地址是否生效\n8.8266往PC上发送5字节数据"
  sub module: TCP
  summary: do TCP send after IP changed
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: TCP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0408
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SSC SSC1 dhcp -E -o 1
    - - R SSC1 C +DHCP:STA,OK
  - - SSC SSC1 ip -S -o 1 -i 192.168.111.210
    - - P SSC1 C +IP:OK
  - - SSC SSC1 ip -Q -o 1
    - - R SSC1 C +STAIP:192.168.111.210
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK; PC TCP server accept 成功
    4.OK
    5.OK
    6.OK
    7.OK
    8.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: "1.PC上建立TCP 监听 test_tcp_port1\n2.target1上创建TCP socket1\n3.target1上使用步骤2创建的socket1，去连接
    PC的ip，test_tcp_port1\n4.PC与target1创建好TCP 连接，有ACCEPT\n5.关闭8266的DHCP 1\n6.设置sta
    ip \n7.查询sta ip 地址是否生效\n8.关闭建立的socket1连接"
  sub module: TCP
  summary: close TCP socket after IP changed
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: TCP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0411
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock2> -l 5
    - - P SSC1 RE SEND:\d+,ERROR
  - - SSC SSC1 soc -S -s <sock1> -l 5
    - - P SSC1 RE SEND:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK; PC TCP server accept 成功
    4.OK
    5.OK
    6.ERROR
    7.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket1
    3.target1上使用步骤2创建的socket1，去连接 PC的ip，test_tcp_port1
    4.PC与target1创建好TCP 连接，有ACCEPT
    5.target1上创建TCP socket2
    6.8266往PC socket2上发送5字节数据
    7.8266往PC socket1上发送5字节数据
  sub module: TCP
  summary: do TCP send after socket changed
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: TCP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0412
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - R SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  - - SSC SSC1 soc -T -s <sock2>
    - - R SSC1 RE CLOSE:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK; PC TCP server accept 成功
    4.OK
    5.OK
    6.OK
    7.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.target1上创建TCP socket1
    3.target1上使用步骤2创建的socket1，去连接 PC的ip，test_tcp_port1
    4.PC与target1创建好TCP 连接，有ACCEPT
    5.target1上创建TCP socket2
    6.关闭socket1 连接
    7.关闭socket2连接
  sub module: TCP
  summary: close TCP send after socket changed
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: TCP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_TCP_0501
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - STRING <cap_filter> ether%20src%20%%s%20or%20ether%20dst%20%%s <target_mac>
      <target_mac>
    - - R PC_COM C OK
  - - NIC NIC1 START <pc_nic> capture+block_ip <cap_filter>
    - - R PC_COM C +NIC_START:OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - ''
  - - DELAY 10
    - - R SSC1 RE CONNECT:\d+,ERROR
  execution time: 0.0
  expected result: 2. connect failed, no exception
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1. PC do not reply any IP packet on NIC
    2. target try to connect to TCP server with PC NIC IP
  sub module: TCP
  summary: PC do not reply TCP SYN of target
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: TCP connect and disconnect abnormal case
  version: v1 (2015-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0601
  SDK: |-
    8266_RTOS
    8266_NonOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - PING <target_ip> -c 1
    - - R PC_COM C +PING
  - - SOC SOC1 LISTEN <random_port> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <random_port>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 socopt -S -s <sock1> -k Keepalive -o 1
    - - R SSC1 C +SETOPTION:Keepalive,OK
  - - SSC SSC1 socopt -S -s <sock1> -k Keepidle -o 20
    - - R SSC1 C +SETOPTION:Keepidle,OK
  - - SSC SSC1 socopt -S -s <sock1> -k Keepintvl -o 1
    - - R SSC1 C +SETOPTION:Keepintvl,OK
  - - SSC SSC1 socopt -S -s <sock1> -k Keepcnt -o 3
    - - R SSC1 C +SETOPTION:Keepcnt,OK
  - - NIC <pc_nic> DISABLED
    - - R PC_COM C OK
  - - DELAY 30
    - - R SSC1 C CLOSE
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK
    6.OK
    7.OK
    8.OK
    9.OK
    10.等待30s
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PING <target_ip>
    2.PC上建立TCP 监听 random_port
    3.target1上创建TCP socket
    4.target1上步骤3创建的socket设置so_keepalive属性
    5.target1上步骤3创建的socket设置so_keepidle参数
    6.target1上步骤3创建的socket设置so_keepintvl参数
    7.target1上步骤3创建的socket设置so_keepcnt参数
    8.target1上使用步骤7具有so_keepalive属性及参数的socket，去连接 PC的ip，random_port
    9.PC上网卡禁止掉
    10.等待30s
  sub module: TCP
  summary: Test socket with so_keepalive option
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0602
  SDK: |-
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t TCP -i <target_ip> -p <test_tcp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -B -t TCP -i <target_ip> -p <test_tcp_port1>
    - - R SSC1 C +BIND:ERROR
  execution time: 0.0
  expected result: |-
    1.OK
    2.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.target1上创建TCP socket,bind test_udp_port1
    2.target1上创建TCP socket,bind test_udp_port1
  sub module: TCP
  summary: Test socket with so_reuseaddr option closed on TCP submodule
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0603
  SDK: ESP32_IDF
  Test App: SSC_OPTION
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <random_port> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP -i <target_ip> -p <test_tcp_port2>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <random_port>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -T
    - - R SSC1 C CLOSEALL
  - - SSC SSC1 soc -B -t TCP -i <target_ip> -p <test_tcp_port2>
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock2>
    - - P SSC1 RE LISTEN:\d+,OK
  - - SSC SSC1 soc -T
    - - R SSC1 C CLOSEALL
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.CLOSEALL
    5.OK
    6.OK
    7.CLOSEALL
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.find esp-idf/components/lwip/include/lwip/lwip/opt.h file, make "#define SO_REUSE  1" instead of "#define SO_REUSE  0"
    2.switch to esp-idf/SSC, run "./gen_misc_ng.sh SSC_OPTION" and "make flash", then run the test case normally
    3.PC上建立TCP 监听 random_port
    4.target1上创建TCP socket,bind test_tcp_port2
    5.target1上使用步骤4创建的socket，去连接 PC的ip，random_port
    6.关闭socket
    7.target1上创建TCP socket,bind test_tcp_port2
    8.target1上建立TCP 监听
    9.关闭socket
  sub module: TCP
  summary: Test socket with so_reuseaddr option opened that close TCP connection not
    react immediately on ESP32
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0604
  SDK: ESP32_IDF
  Test App: SSC_OPTION
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t TCP -i <target_ip> -p <test_tcp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -B -t TCP -i <target_ip> -p <test_tcp_port1>
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.find esp-idf/components/lwip/include/lwip/lwip/opt.h file, make "#define SO_REUSE  1" instead of "#define SO_REUSE  0"
    2.switch to esp-idf/SSC, run "./gen_misc_ng.sh SSC_OPTION" and "make flash", then run the test case normally
    3.target1上创建TCP socket,bind test_udp_port1
    4.target1上创建TCP socket,bind test_udp_port1
  sub module: TCP
  summary: Test socket with so_reuseaddr option opened that build two tcp sockets
    by binding same ip and port on ESP32
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0605
  SDK: ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <random_port> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <random_port>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SOC SOC2 SEND 5
    - - R SSC1 SL <sock1>+5
  - - SSC SSC1 soc -S -s <sock1> -l 5
    - - P SSC1 RE SEND:\d+,OK
  - - SSC SSC1 socopt -S -s <sock1> -k Sndtimeo -o 1
    - - R SSC1 C +SETOPTION:Sndtimeo,OK
  - - NIC <pc_nic> DISABLED
    - - R PC_COM C OK
  - - SSC SSC1 soc -S -s <sock1> -l 5000
    - - P SSC1 RE SEND:\d+,OK
  - - SSC SSC1 soc -S -s <sock1> -l 5000 -n 4
    - - P SSC1 RE SEND:\d+,ERROR,11
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK
    6.OK
    7.OK
    8.OK
    9.OK
    10.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 random_port
    2.target1上创建TCP socket
    3.target1上使用步骤2创建的socket，去连接 PC的ip，random_port
    4.PC与target1 创建好TCP 连接，有ACCEPT
    5.PC send 5 bytes to target1
    6.target1 send 5 bytes to PC
    7.target1上对步骤2创建的socket设置so_sndtimeo属性
    8.PC上网卡禁止掉
    9.target1 send 5000 bytes to PC
    10.target1 send 5000 bytes to PC
  sub module: TCP
  summary: Test socket with so_sndtimeo option on ESP32
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0606
  SDK: |-
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - PING <target_ip> -c 1
    - - R PC_COM C +PING
  - - SOC SOC1 LISTEN <random_port> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <random_port>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SOC SOC2 SEND 5
    - - R SSC1 SL <sock1>+5
  - - SSC SSC1 socopt -S -s <sock1> -k Rcvtimeo -o 1
    - - R SSC1 C +SETOPTION:Rcvtimeo,OK
  - - SOC SOC2 SEND 5
    - - R SSC1 RE CLOSED:\d+,11
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK
    6.OK
    7.OK
    8.CLOSED
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PING <target_ip>
    2.PC上建立TCP 监听 random_port
    3.target1上创建TCP socket
    4.target1上使用步骤3创建的socket，去连接 PC的ip，random_port
    5.PC与target1 创建好TCP 连接，有ACCEPT
    6.PC send 5 bytes to target1
    7.target1上对步骤3创建的socket设置so_rcvtimeo属性
    8.PC send 5 bytes to target1
  sub module: TCP
  summary: Test socket with so_rcvtimeo option
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0607
  SDK: |-
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <random_port> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <random_port>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <random_port>
    - - P SSC1 RE CONNECT:\d+,ERROR
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 random_port
    2.target1上创建TCP socket
    3.target1上使用步骤2创建的socket，去连接 PC的ip，random_port
    4.target1上使用步骤2创建的socket，去连接 PC的ip，random_port, 获取 error code
  sub module: TCP
  summary: Test socket with so_error option
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0608
  SDK: 8266_RTOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <random_port> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 ram -Q
    - - R SSC1 A <heapsize>:\+FREEHEAP:(\d+)\r\n
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 socopt -S -s <sock1> -k Linger -o 1
    - - R SSC1 C +SETOPTION:Linger,OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <random_port>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -T
    - - P SSC1 RE CLOSE:\d+,OK
  - - SSC SSC1 ram -Q
    - - R SSC1 P <heapsize>
  execution time: 0.0
  expected result: |-
    1.OK
    2.查询空闲ram
    3.OK
    4.OK
    5.OK
    6.OK
    7.查询空闲ram
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 random_port
    2.查询空闲ram
    3.target1上创建TCP socket
    4.target1上对步骤3创建的socket设置so_linger属性
    5.target1上使用步骤4具有so_linger属性的socket，去连接 PC的ip，random_port
    6.关闭 socket
    7.查询空闲ram
  sub module: TCP
  summary: Test socket with so_linger option
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_TCP_0609
  SDK: 8266_RTOS
  Test App: SSC
  allow fail: ''
  auto test: 'No'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <random_port> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP -i <target_ip> -p <test_tcp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <random_port>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -T
    - - R SSC1 C CLOSEALL
  - - SSC SSC1 soc -B -t TCP -i <target_ip> -p <test_tcp_port1>
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock2>
    - - P SSC1 RE LISTEN:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.CLOSEALL
    5.OK
    6.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.find ESP8266_RTOS_SDK/include/lwip/lwip/opt.h file, make "#define SO_REUSE  1" instead of "#define SO_REUSE  0"
    2.switch to ESP8266_RTOS_SDK/third_party, run "./make_lib.sh lwip" risc,then continuely run "ll ../lib"
    3.switch to ESP8266_RTOS_SDK/SSC, run "./gen_misc_rtos.sh SSC", then run the test case normally
    4.PC上建立TCP 监听 random_port
    5.target1上创建TCP socket,bind test_tcp_port1
    6.target1上使用步骤5创建的socket，去连接 PC的ip，random_port
    7.关闭socket
    8.target1上创建TCP socket,bind test_tcp_port1
    9.target1上建立TCP 监听
  sub module: TCP
  summary: Test socket with so_reuseaddr option opened that close TCP connection not
    react immediately on 8266_RTOS
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_TCP_0610
  SDK: 8266_RTOS
  Test App: SSC
  allow fail: ''
  auto test: 'No'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t TCP -i <target_ip> -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -B -t TCP -i <target_ip> -p <test_udp_port1>
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.find ESP8266_RTOS_SDK/include/lwip/lwip/opt.h file, make "#define SO_REUSE  1" instead of "#define SO_REUSE  0"
    2.switch to ESP8266_RTOS_SDK/third_party, run "./make_lib.sh lwip" risc,then continuely run "ll ../lib"
    3.switch to ESP8266_RTOS_SDK/SSC, run "./gen_misc_rtos.sh SSC", then run the test case normally
    4.target1上创建TCP socket,bind test_udp_port1
    5.target1上创建TCP socket,bind test_udp_port1
  sub module: TCP
  summary: Test socket with so_reuseaddr option opened that build two tcp sockets
    by binding same ip and port on 8266_RTOS
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0611
  SDK: 8266_RTOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <random_port> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <random_port>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SOC SOC1 ACCEPT SOC2
    - - R SOC_COM L OK
  - - SOC SOC2 SEND 5
    - - R SSC1 SL <sock1>+5
  - - SSC SSC1 soc -S -s <sock1> -l 5
    - - P SSC1 RE SEND:\d+,OK
  - - SSC SSC1 socopt -S -s <sock1> -k Sndtimeo -o 1
    - - R SSC1 C +SETOPTION:Sndtimeo,OK
  - - NIC <pc_nic> DISABLED
    - - R PC_COM C OK
  - - SSC SSC1 soc -S -s <sock1> -l 1500
    - - P SSC1 RE SEND:\d+,OK
  - - SSC SSC1 soc -S -s <sock1> -l 1500
    - - P SSC1 RE SEND:\d+,ERROR,11
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK
    6.OK
    7.OK
    8.OK
    9.OK
    10.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 random_port
    2.target1上创建TCP socket
    3.target1上使用步骤2创建的socket，去连接 PC的ip，random_port
    4.PC与target1 创建好TCP 连接，有ACCEPT
    5.PC send 5 bytes to target1
    6.target1 send 5 bytes to PC
    7.target1上对步骤2创建的socket设置so_sndtimeo属性
    8.PC上网卡禁止掉
    9.target1 send 1500 bytes to PC
    10.target1 send 1500 bytes to PC
  sub module: TCP
  summary: Test socket with so_sndtimeo option on 8266_RTOS
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0612
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <test_tcp_port1> <pc_ip>
    - - R SOC_COM L OK
  - - SOC SOC2 LISTEN <test_tcp_port2> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 socopt -S -s <sock1> -k Maxconnect -o 1
    - - R SSC1 C +SETOPTION:Maxconnect,OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <test_tcp_port1>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock2> -i <pc_ip> -p <test_tcp_port2>
    - - P SSC1 RE CONNECT:\d+,ERROR
  - - SSC SSC1 soc -T
    - - R SSC1 C CLOSE
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK
    6.OK
    7.ERROR
    8.CLOSE
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 test_tcp_port1
    2.PC上建立TCP 监听 test_tcp_port2
    3.target1上创建TCP socket
    4.target1上对步骤3创建的socket设置 Maxconnect属性
    5.target1上使用步骤4具有Maxconnect属性的socket，去连接 PC的ip，test_tcp_port1
    6.target1上创建TCP socket
    7.target1上使用步骤6创建的socket，去连接 PC的ip，test_tcp_port2
    8.关闭socket
  sub module: TCP
  summary: Test socket with Maxconnect option
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0613
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - PING <target_ip> -c 1
    - - R PC_COM C +PING
  - - SSC SSC1 soc -B -t TCP -i <target_ip> -p <random_port>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock1>
    - - P SSC1 RE LISTEN:\d+,OK
  - - SSC SSC1 socopt -S -s <sock1> -k MaxConnectNum -o 1
    - - R SSC1 C +SETOPTION:MaxConnectNum,OK
  - - SOC SOC1 CONNECT <random_port> <target_ip>
    - - R SSC1 A <sock2>:ACCEPT:(\d+),\d+,.+,\d+
  - - SOC SOC2 CONNECT <random_port> <target_ip>
    - - P SOC_COM C ERROR
  - - SSC SSC1 soc -T
    - - R SSC1 C CLOSE
  execution time: 0.0
  expected result: |-
    1.PING <target_ip>
    2.OK
    3.OK
    4.OK
    5.PC TCP client accept
    6.ERROR
    7.CLOSE
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PING <target_ip>
    2.target1上创建TCP socket，bind random_port
    3.target1上使用步骤2创建的socket1,建立TCP 监听
    4.target1上对步骤2创建的socket设置 MaxConnectNum属性
    5.PC TCP 连接到target1  <random_port>,<target_ip>
    6.PC TCP 连接到target1  <random_port>,<target_ip>
    7.关闭socket
  sub module: TCP
  summary: Test socket with MaxConnectNum option
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0614
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - PING <target_ip> -c 1
    - - R PC_COM C +PING
  - - SSC SSC1 soc -B -t TCP -i <target_ip> -p <test_tcp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 socopt -S -s <sock1> -k Registtime -o 20
    - - R SSC1 C +SETOPTION:Registtime,OK
  - - SSC SSC1 soc -L -s <sock1>
    - - P SSC1 RE LISTEN:\d+,OK
  - - SOC SOC1 CONNECT <test_tcp_port1> <target_ip>
    - - R SSC1 A <sock1>:ACCEPT:(\d+),\d+,.+,\d+
  - - DELAY 30
    - - P SOC_COM NC SOC_CLOSED
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.PC TCP client accept
    6.等待30s
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PING <target_ip>
    2.target1上创建TCP socket，bind test_tcp_port1
    3.target1上对步骤2创建的socket设置 Registtime 属性
    4.target1上使用步骤3具有Registtime属性的socket1,建立TCP 监听
    5.PC TCP 连接到target1 <test_tcp_port1>, <target_ip>
    6.等待30s
  sub module: TCP
  summary: Test socket with Registtime option
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0615
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <random_port> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <random_port>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 socopt -S -s <sock1> -k Abort
    - - R SSC1 C CLOSED
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.CLOSED
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 random_port
    2.target1上创建TCP socket
    3.target1上使用步骤2创建的socket，去连接 PC的ip，random_port
    4.target1上对步骤2创建的socket设置 Abort 属性
  sub module: TCP
  summary: Test socket with Abort option
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0616
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 LISTEN <random_port> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t TCP -i <target_ip> -p <test_tcp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -C -s <sock1> -i <pc_ip> -p <random_port>
    - - P SSC1 RE CONNECT:\d+,OK
  - - SSC SSC1 soc -T
    - - R SSC1 C CLOSEALL
  - - SSC SSC1 soc -B -t TCP -i <target_ip> -p <test_tcp_port1>
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -L -s <sock2>
    - - P SSC1 RE LISTEN:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.CLOSEALL
    5.OK
    6.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上建立TCP 监听 random_port
    2.target1上创建TCP socket,bind test_tcp_port1
    3.target1上使用步骤2创建的socket，去连接 PC的ip，random_port
    4.关闭socket
    5.target1上创建TCP socket,bind test_tcp_port1
    6.target1上建立TCP 监听
  sub module: TCP
  summary: Test socket with so_reuseaddr option opened that close TCP connection not
    react immediately on 8266_NonOS
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_0617
  SDK: 8266_NonOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t TCP -i <target_ip> -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -B -t TCP -i <target_ip> -p <test_udp_port1>
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.target1上创建TCP socket,bind test_udp_port1
    2.target1上创建TCP socket,bind test_udp_port1
  sub module: TCP
  summary: Test socket with so_reuseaddr option opened that build two tcp sockets
    by binding same ip and port on 8266_NonOS
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_5001
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - TCPStress/TCPConnection
  - - max_connection = 5
    - - dummy
  - - execute_time = 300
    - - ''
  - - connect_method = ["C_01", "C_02", "C_05", "C_07"]
    - - ''
  - - disconnect_method = ["D_01", "D_03", "D_05", "D_06"]
    - - ''
  - - pc_ip = "pc_ip"
    - - ''
  - - target_ip = "target_ip"
    - - ''
  execution time: 5.0
  expected result: 1. succeed
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1. random choose connect method to do connect, random choose a method to close
    Loop executing step 1
  sub module: TCP
  summary: test possible TCP connect/disconnect method
  test environment: SSC_T1_6
  test point 1: function + stress
  test point 2: TCP connect and disconnect test
  version: v2 (2016-11-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_5101
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stable
  cmd set:
  - TCPStress/TCPAPNSTA
  - - send_len = 1460
    - - dummy
  - - test_time = 720
    - - ''
  - - server_port = "<test_tcp_port1>"
    - - ''
  - - server_echo = True
    - - ''
  - - sta_number = 4
    - - ''
  - - send_delay = 50
    - - ''
  - - ap_ip = "<target_ap_ip>"
    - - ''
  execution time: 12.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
    4. all TCP connection not disconnected
  initial condition: None
  level: Integration
  module: TCPIP
  steps: |-
    1. all sta connect to softap
    2. create tcp server on softap
    3. all sta connect to softap tcp server
    4. do bi-direction send on all tcp connections
  sub module: TCP
  summary: 1 AP 4 STA TCP stable test
  test environment: SSC_T5_1
  test point 1: stable
  test point 2: TCP stable test
  version: v2 (2016-11-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_5102
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stable
  cmd set:
  - TCPStress/TCPRandomSend
  - - delay_config = [0, 0.01, 0.1, 0.5, 1]
    - - dummy
  - - send_count = 1000
    - - ''
  - - test_time = 300
    - - ''
  execution time: 12.0
  expected result: |-
    1. succeed
    2. succeed
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1. create TCP connection
    2. PC send random length data to target
  sub module: TCP
  summary: send random length segment to target
  test environment: SSC_T1_6
  test point 1: stable
  test point 2: TCP stable test
  version: v2 (2016-11-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_5103
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stable
  cmd set:
  - TCPStress/TCPSoftAPSTASendRecv
  - - send_len = 1460
    - - dummy
  - - test_time = 720
    - - ''
  - - test_count = 0xFFFFFF
    - - ''
  - - server_port = "<test_tcp_port1>"
    - - ''
  - - server_port_2 = "<test_tcp_port2>"
    - - ''
  - - server_echo = True
    - - ''
  - - sta_number = 3
    - - ''
  - - send_delay = 50
    - - ''
  - - pass_standard = (4*3600)
    - - ''
  - - ap_ip = "<target_ap_ip>"
    - - ''
  execution time: 12.0
  expected result: |-
    1. succeed
    2. verify reciveid data on target and PC succeed
  initial condition: None
  level: Integration
  module: TCPIP
  steps: |-
    1. create TCP connection
    2. send specified pattern on both direction
  sub module: TCP
  summary: TCP SoftSTA send/recv stress test
  test environment: SSC_T5_1
  test point 1: stable
  test point 2: TCP stable test
  version: v2 (2016-11-15)
- CI ready: 'No'
  ID: TCPIP_TCP_5104
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - TCPStress/TCPMultiSTASendRecv
  - - send_len = 1460
    - - dummy
  - - test_time = 300
    - - ''
  - - server_echo = True
    - - ''
  - - sta_number = 5
    - - ''
  - - send_delay = 500
    - - ''
  execution time: 5.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: None
  level: Integration
  module: TCPIP
  steps: |-
    1. 5 sta connect to softap
    2. create TCP socket on all sta
    3. all sta do TCP send/recv
  sub module: TCP
  summary: 1 SoftAP 5 STA, create TCP server on one STA, create TCP client on other
    STA, do TCP send/recv
  test environment: SSC_T6_1
  test point 1: stress
  test point 2: TCP stress test
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_TCP_5105
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - TCPStress/TCPSTAMuitiSockSendRecv
  - - send_len = 1460
    - - dummy
  - - test_time = 300
    - - ''
  - - server_echo = True
    - - ''
  - - sta_number = 2
    - - ''
  - - conn_number = 6
    - - ''
  - - send_delay = 500
    - - ''
  execution time: 5.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: None
  level: Integration
  module: TCPIP
  steps: |-
    1. 2 sta connect to softap
    2. create multi tcp socket on all sta
    3. all sta do tcp send/recv
  sub module: TCP
  summary: 1 SoftAP 2 STA, create multi TCP socket between STA, do TCP send/recv
  test environment: SSC_T3_1
  test point 1: stress
  test point 2: TCP stress test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_5106
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stable
  cmd set:
  - TCPStress/TCPRandomSend
  - - delay_config = [0, 0.01, 0.1, 0.5, 1]
    - - dummy
  - - send_count = 1000
    - - ''
  - - test_time = 300
    - - ''
  execution time: 12.0
  expected result: |-
    1. succeed
    2. succeed
  initial condition: T1_ETH
  level: Integration
  module: TCPIP
  steps: |-
    1. create TCP connection
    2. PC send random length data to target
  sub module: TCP
  summary: send random length segment to target for Ethernet
  test environment: ETH_T1_1
  test point 1: stable
  test point 2: TCP stable test
  version: v2 (2016-11-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_5201
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - TCPStress/TCPSendRecv
  - - send_len = 1460
    - - dummy
  - - test_time = 300
    - - ''
  - - duplex = True
    - - ''
  - - conn_num = 5
    - - ''
  - - send_delay = 20
    - - ''
  execution time: 12.0
  expected result: |-
    1. succeed
    2. succeed
    3. all TCP connection not disconnected
  initial condition: T2_1
  level: Integration
  module: TCPIP
  steps: |-
    1. sta connect to softap
    2. create multiple tcp connection
    3. do send/recv on all tcp connections
  sub module: TCP
  summary: TCP send/recv stress test
  test environment: SSC_T2_5
  test point 1: stress
  test point 2: TCP stress test
  version: v2 (2016-11-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_5202
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - TCPStress/TCPDataValidation
  - - test_time = 1440
    - - dummy
  - - tx_enable = True
    - - ''
  - - rx_enable = True
    - - ''
  - - conn_num = 1
    - - ''
  - - send_len = 1024
    - - ''
  execution time: 24.0
  expected result: |-
    1. succeed
    2. verify reciveid data on target and PC succeed
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1. create TCP connection
    2. send specified pattern on both direction
  sub module: TCP
  summary: TCP send/recv data validation
  test environment: SSC_T1_6
  test point 1: stress
  test point 2: TCP stress test
  version: v2 (2016-11-15)
- CI ready: 'No'
  ID: TCPIP_TCP_5203
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - TCPStress/TCPRandomSend
  - - delay_config = [0, 0.01, 0.1, 0.5, 1]
    - - dummy
  - - send_count = 1000
    - - ''
  - - test_time = 300
    - - ''
  execution time: 12.0
  expected result: |-
    1. succeed
    2. succeed
    3. 不断开
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1. ESP8089在同一信道进行iperf测试
    2. create TCP connection
    3. PC send random length data to target
  sub module: TCP
  summary: TCP 信道竞争测试
  test environment: SSC_T1_8089
  test point 1: stress
  test point 2: TCP stress test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_TCP_5204
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - TCPStress/TCPDataValidation
  - - test_time = 1440
    - - dummy
  - - tx_enable = True
    - - ''
  - - rx_enable = True
    - - ''
  - - conn_num = 1
    - - ''
  - - send_len = 1024
    - - ''
  execution time: 24.0
  expected result: |-
    1. succeed
    2. verify reciveid data on target and PC succeed
  initial condition: T1_ETH
  level: Integration
  module: TCPIP
  steps: |-
    1. create TCP connection
    2. send specified pattern on both direction
  sub module: TCP
  summary: TCP send/recv data validation for Ethernet
  test environment: ETH_T1_1
  test point 1: stress
  test point 2: TCP stress test
  version: v2 (2016-11-15)
- CI ready: 'No'
  ID: TCPIP_TCP_5301
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - TCPStress/TCPThroughput
  - - send_len = 1460
    - - dummy
  - - tx_enable = True
    - - ''
  - - rx_enable = False
    - - ''
  - - measure_period = 5
    - - ''
  execution time: 2.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: STAM1
  level: Integration
  module: TCPIP
  steps: |-
    1. config attenuator (0-59)
    2. scan AP to get AP RSSI
    3. create TCP connection and send data for several seconds
    Loop step 1 - 3
  sub module: TCP
  summary: TCP throughput Tx in shield box
  test environment: SSC_T1_ShieldBox
  test point 1: performance
  test point 2: TCP throughput
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_TCP_5302
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - TCPStress/TCPThroughput
  - - send_len = 1460
    - - dummy
  - - tx_enable = False
    - - ''
  - - rx_enable = True
    - - ''
  - - measure_period = 5
    - - ''
  execution time: 2.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: STAM1
  level: Integration
  module: TCPIP
  steps: |-
    1. config attenuator (0-59)
    2. scan AP to get AP RSSI
    3. create TCP connection and recv data for several seconds
    Loop step 1 - 3
  sub module: TCP
  summary: TCP throughput Rx in shield box
  test environment: SSC_T1_ShieldBox
  test point 1: performance
  test point 2: TCP throughput
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_TCP_5401
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - TCPStress/EthTCPThroughput
  - - send_len = 1460
    - - dummy
  - - tx_enable = True
    - - ''
  - - rx_enable = False
    - - ''
  - - measure_period = 30
    - - ''
  - - test_count = 5
    - - ''
  execution time: 0.5
  expected result: |-
    1. succeed
    2. succeed
  initial condition: T1_ETH
  level: Integration
  module: TCPIP
  steps: |-
    1. DUT open eth and get ip
    2. DUT band socket and send packet to PC for several secends
    Loop for step 1-2
  sub module: TCP
  summary: TCP throughput Tx for Ethernet
  test environment: ETH_T1_1
  test point 1: stress
  test point 2: TCP stress test
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_TCP_5402
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - TCPStress/EthTCPThroughput
  - - send_len = 1460
    - - dummy
  - - tx_enable = False
    - - ''
  - - rx_enable = True
    - - ''
  - - measure_period = 30
    - - ''
  - - test_count = 5
    - - ''
  execution time: 0.5
  expected result: |-
    1. succeed
    2. succeed
  initial condition: T1_ETH
  level: Integration
  module: TCPIP
  steps: |-
    1. DUT open eth and get ip
    2. DUT band socket and PC send packet to DUT for several secends
    Loop for step 1-2
  sub module: TCP
  summary: TCP throughput Rx for Ethernet
  test environment: ETH_T1_1
  test point 1: stress
  test point 2: TCP stress test
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_TCP_5501
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - TCPStress/EthTCPSocketTest
  - - send_len = 1460
    - - dummy
  - - test_count = 1000
    - - ''
  - - tx_enable = True
    - - ''
  - - rx_enable = False
    - - ''
  execution time: 1.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: T1_ETH
  level: Integration
  module: TCPIP
  steps: |-
    1. DUT open eth and get ip
    2. PC bind socket and send packet to DUT for several secends
    3. DUT close eth randomly
    Loop for step 1-3
  sub module: TCP
  summary: Eth random close while sending packets
  test environment: ETH_T1_1
  test point 1: stress
  test point 2: TCP stress test
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_TCP_5601
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - TCPStress/TCPSoftAPSTAThroughput
  - - send_len = 1460
    - - dummy
  - - sta_rx_enable = False
    - - ''
  - - sta_tx_enable = True
    - - ''
  - - measure_period = 15
    - - ''
  execution time: 1.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
    4. succeed
  initial condition: T2_1
  level: Integration
  module: TCPIP
  steps: |-
    1. STA connect softAP
    2. create TCP socket connect
    3. send TCP packet
    4. calculate the troughput
  sub module: TCP
  summary: STA TCP throughput Tx while connected with softAP
  test environment: SSC_T2_ShieldBox2
  test point 1: Performance test
  test point 2: TCP throughput
  version: v1 (2016-10-18)
- CI ready: 'No'
  ID: TCPIP_TCP_5602
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - TCPStress/TCPSoftAPSTAThroughput
  - - send_len = 1460
    - - dummy
  - - sta_rx_enable = True
    - - ''
  - - sta_tx_enable = False
    - - ''
  - - measure_period = 15
    - - ''
  execution time: 1.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
    4. succeed
  initial condition: T2_1
  level: Integration
  module: TCPIP
  steps: |-
    1. STA connect softAP
    2. create TCP socket connect
    3. send TCP packet
    4. calculate the troughput
  sub module: TCP
  summary: STA TCP throughput Rx while connected with softAP
  test environment: SSC_T2_ShieldBox2
  test point 1: Performance test
  test point 2: TCP throughput
  version: v1 (2016-10-18)
- CI ready: 'No'
  ID: TCPIP_TCP_5701
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - StableTest/EthGetIP
  - - test_count = 5000
    - [dummy]
  comment: ''
  execution time: 5.0
  expected result: '1. succeed

    2. succeed

    3. succeed

    4. succeed'
  initial condition: None
  initial condition description (auto): none
  level: Integration
  module: TCPIP
  steps: |-
    1. reboot

    2. open eth

    3. delay 10s

    4. ip query
  sub module: TCP
  summary: Eth get ip test
  test environment: ETH_T1_1
  test point 1: stress
  test point 2: TCP stress test
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_TCP_6001
  SDK: ESP32_IDF, 8266_NonOS, 8266_RTOS
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Stable
  cmd set:
  - StableTest/TCPStable
  - - send_delay = 5
    - - ''
  - - timeout = 20
    - - ''
  - - test_time = 7*24*60
    - - ''
  - - conn_num = 1
    - - ''
  - - send_len = 100
    - - ''
  execution time: 168
  expected result: 1. succeed 2. DUT1 receive PC echo in timeout 3. succeed 4. succeed
  initial condition: STAO2
  level: Integration
  module: TCPIP
  steps: 1. create TCP connection 2. DUT send data to PC, PC do echo 3. delay for
    send_delay 4. repeat step 2-3
  sub module: TCP
  summary: TCP send receive delay stable test
  test environment: SSC_T1_1
  test point 1: Stable
  test point 2: TCP send receive stable test
  version: v1 (2017-04-21)
- CI ready: 'No'
  ID: TCPIP_TCP_9901
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: IOT
  cmd set:
  - TCPStress/TCPThroughputCompatibility
  - - send_len = 1460
    - - dummy
  - - test_times = 10
    - - ''
  - - tx_enable = True
    - - ''
  - - rx_enable = False
    - - ''
  - - measure_period = 30
    - - ''
  execution time: 2.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: STAM1
  level: Integration
  module: TCPIP
  steps: |-
    1. scan AP to get AP RSSI
    2. create TCP connection and send data for several seconds
    3. calculate the throughput
    Loop step 1 - 3
  sub module: TCP
  summary: TCP throughput Tx Compatibility test in shield box
  test environment: SSC_T1_ShieldBox
  test point 1: performance
  test point 2: TCP throughput Compatibility test
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_TCP_9902
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: IOT
  cmd set:
  - TCPStress/TCPThroughputCompatibility
  - - send_len = 1460
    - - dummy
  - - test_times = 10
    - - ''
  - - tx_enable = False
    - - ''
  - - rx_enable = True
    - - ''
  - - measure_period = 30
    - - ''
  execution time: 2.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: STAM1
  level: Integration
  module: TCPIP
  steps: |-
    1. scan AP to get AP RSSI
    2. create TCP connection and send data for several seconds
    3. calculate the throughput
    Loop step 1 - 3
  sub module: TCP
  summary: TCP throughput Rx Compatibility test in shield box
  test environment: SSC_T1_ShieldBox
  test point 1: performance
  test point 2: TCP throughput Compatibility test
  version: v1 (2016-8-15)
