test cases:
- CI ready: 'Yes'
  ID: TCPIP_UDP_0101
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 RE BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -i 0.0.0.0 -p <test_udp_port2>
    - - R SSC1 RE BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 C BIND:ERROR
  - - SSC SSC1 soc -B -t TCP -p <test_udp_port1>
    - - R SSC1 RE BIND:(\d+),OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.ERROR
    4.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    2.target1上UDP传输，Bind socket2,本地ip 0.0.0.0 target_udp_port2
    3.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    4.target1上创建TCP socket3, target_udp_port1
  sub module: UDP
  summary: STA mode, udp bind test. use different ip, port
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0102
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: 2/3
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip>
    - - R SOC_COM L OK
  - - SOC SOC2 BIND <test_udp_port2> <pc_ip2>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 10
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 10
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip2> -p <test_udp_port2> -l 10
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC2 UL 10
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip>
    2.PC上SOC2 UDP传输，bing <test_udp_port2> <pc_ip2>
    3.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    4.target1上使用步骤3创建的socket1，往pc_ip，test_tcp_port1上发送10字节数据
    5.target1上使用步骤3创建的socket1，往pc_ip2，test_tcp_port2上发送10字节数据
  sub module: UDP
  summary: STA mode, sendto test. use different ip, port
  test environment: SSC_T1_9
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0103
  SDK: |-
    8266_NonOS
    8266_RTOS
  Test App: SSC
  allow fail: 1/3
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 1
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 1
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 1472
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 1472
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 1473
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC_COM NC SOC_RECVFROM
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 1472 -n 10 -j 20
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 14720
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK,没有到UDP包
    6.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip>
    2.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    3.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送1字节数据
    4.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送1472字节数据
    5.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送1473字节数据
    6.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送1472*10字节数据
  sub module: UDP
  summary: STA mode, sendto test with different length
  test environment: SSC_T1_9
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0103
  SDK: ESP32_IDF
  Test App: SSC
  allow fail: 1/5
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 1
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 1
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 1472
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 1472
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 1473
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC_COM NC SOC_RECVFROM
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip>
    2.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    3.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送1字节数据
    4.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送1472字节数据
    5.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送1473字节数据
  sub module: UDP
  summary: STA mode, sendto test with different length
  test environment: SSC_T1_9
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0104
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: 1/3
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SOC SOC1 SENDTO 1 <test_udp_port1> <target_ip>
    - - R SSC1 SL <sock1>+1
  - - SOC SOC1 SENDTO 1472 <test_udp_port1> <target_ip>
    - - R SSC1 RE "RECVFROM:%%s,1472,%%s,%%u"%%(<sock1>,<pc_ip>,<test_udp_port1>)
  - - SOC SOC1 SENDTO 1473 <test_udp_port1> <target_ip>
    - - P SSC1 NC +RECVFROM
      - P SOC_COM C OK
  - - SOC SOC2 BIND <test_udp_port2> <pc_ip2>
    - - R SOC_COM L OK
  - - SOC SOC2 SENDTO 1472 <test_udp_port1> <target_ip>
    - - R SSC1 RE "RECVFROM:%%s,1472,%%s,%%u"%%(<sock1>,<pc_ip2>,<test_udp_port2>)
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK,没收到UDP包
    6.OK
    7.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip>
    2.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    3.PC往8266上发送1字节数据
    4.PC往8266上发送1472字节数据
    5.PC往8266上发送1473字节数据
    6.PC上SOC2 UDP传输，bing <test_udp_port2> <pc_ip2>
    7.PC往8266上发送1472字节数据
  sub module: UDP
  summary: (special case)STA mode, recvfrom basic test with STAM2
  test environment: SSC_T1_9
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0104_02
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: 1/3
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND_v6 <test_udp_port1> <pc_ip_v6>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDPv6 -i <target_ip_v6> -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SOC SOC1 SENDTO 1 <test_udp_port1> <target_ip_v6>
    - - R SSC1 SL <sock1>+1
  - - SOC SOC1 SENDTO 1472 <test_udp_port1> <target_ip_v6>
    - - R SSC1 RE "RECVFROM:%%s,1472,%%s,%%u"%%(<sock1>,<pc_ip_v6>,<test_udp_port1>)
  - - SOC SOC1 SENDTO 1473 <test_udp_port1> <target_ip_v6>
    - - P SSC1 C +RECVFROM
      - P SOC_COM C OK
  - - SOC SOC2 BIND_v6 <test_udp_port2> <pc_ip2_v6>
    - - R SOC_COM L OK
  - - SOC SOC2 SENDTO 1472 <test_udp_port1> <target_ip_v6>
    - - R SSC1 RE "RECVFROM:%%s,1472,%%s,%%u"%%(<sock1>,<pc_ip2_v6>,<test_udp_port2>)
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK
    6.OK
    7.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip_v6>
    2.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    3.PC往8266上发送1字节数据
    4.PC往8266上发送1472字节数据
    5.PC往8266上发送1473字节数据
    6.PC上SOC2 UDP传输，bing <test_udp_port2> <pc_ip2_v6>
    7.PC往8266上发送1472字节数据
  sub module: UDP
  summary: (special case)STA mode, recvfrom basic test with STAM2(IPv6)
  test environment: SSC_T1_9
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0104_01_02
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: 1/3
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND_v6 <test_udp_port1> <pc_ip_v6>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDPv6 -i <target_ip_v6> -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SOC SOC1 SENDTO 1 <test_udp_port1> <target_ip_v6>
    - - R SSC1 SL <sock1>+1
  - - SOC SOC1 SENDTO 1472 <test_udp_port1> <target_ip_v6>
    - - R SSC1 RE "RECVFROM:%%s,1472,%%s,%%u"%%(<sock1>,<pc_ip_v6>,<test_udp_port1>)
  - - SOC SOC1 SENDTO 1473 <test_udp_port1> <target_ip_v6>
    - - P SSC1 C +RECVFROM
      - P SOC_COM C OK
  - - SOC SOC2 BIND_v6 <test_udp_port2> <pc_ip2_v6>
    - - R SOC_COM L OK
  - - SOC SOC2 SENDTO 1472 <test_udp_port1> <target_ip_v6>
    - - R SSC1 RE "RECVFROM:%%s,1472,%%s,%%u"%%(<sock1>,<pc_ip2_v6>,<test_udp_port2>)
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK
    6.OK
    7.OK
  initial condition: STAAP2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip_v6>
    2.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    3.PC往8266上发送1字节数据
    4.PC往8266上发送1472字节数据
    5.PC往8266上发送1473字节数据
    6.PC上SOC2 UDP传输，bing <test_udp_port2> <pc_ip2_v6>
    7.PC往8266上发送1472字节数据
  sub module: UDP
  summary: (special case)STA mode, recvfrom basic test with STAAP2(IPv6)
  test environment: SSC_T1_9
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0105
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    2.关闭socket1
  sub module: UDP
  summary: STA mode, close UDP sockets test
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0106
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 RE BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port2>
    - - R SSC1 RE BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port3>
    - - R SSC1 RE BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port4>
    - - R SSC1 RE BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port5>
    - - R SSC1 RE BIND:(\d+),OK
  execution time: 0.0
  expected result: |-
    1.ok
    2.ok
    3.ok
    4.ok
    5.ok
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    2.target1上UDP传输，Bind socket2,本地ip target_udp_port2
    3.target1上UDP传输，Bind socket3,本地ip target_udp_port3
    4.target1上UDP传输，Bind socket4,本地ip target_udp_port4
    5.target1上UDP传输，Bind socket5,本地ip target_udp_port5
  sub module: UDP
  summary: STA mode, create max udp socket test
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0107
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -I
    - - P SSC1 RE "SOCINFO:%%s,1,.+,%%d"%%(<sock1>,<test_udp_port1>)
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    2.target1上查询创建socket信息
  sub module: UDP
  summary: STA mode, UDP get active socket info test
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0108
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 RE BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -i 0.0.0.0 -p <test_udp_port2>
    - - R SSC1 RE BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 C BIND:ERROR
  - - SSC SSC1 soc -B -t TCP -p <test_udp_port1>
    - - R SSC1 RE BIND:(\d+),OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.ERROR
    4.OK
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    2.target1上UDP传输，Bind socket2,本地ip 0.0.0.0 target_udp_port2
    3.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    4.target1上创建TCP socket3, target_udp_port1
  sub module: UDP
  summary: AP mode, udp bind test. use different ip, port
  test environment: SSC_T1_8
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0109
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: 1/3
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 ap -S -s <target_ssid> -p <target_password> -t <target_auth_enum>
    - - R SSC1 C +SAP:OK
  - - WIFI <pc_wifi_nic> CONN <target_ssid> <target_password> <pc_ip_wifi> <target_auth>
      <target_encryption>
    - - R PC_COM NC ERROR C +WIFICONN:OK
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password>
    - - R SSC2 RE "\+JAP:CONNECTED,%%s"%%(<target_ssid>)
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC2 ip
    - - R SSC2 A <ssc2_ip>:STAIP:(.+)\r\n
  - - SSC SSC2 soc -B -t UDP -p <test_udp_port2>
    - - R SSC2 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock2> -i <pc_ip_wifi> -p <test_udp_port1> -l 5
    - - R SOC1 UL 5
  - - SSC SSC1 soc -S -s <sock2> -i <ssc2_ip> -p <test_udp_port2> -l 5
    - - R SSC2 RE "RECVFROM:%%s,5,%%s,%%u"%%(<sock1>,<target_ap_ip>,<test_udp_port1>)
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK
  initial condition: T2O_1
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip>
    2.PC上SOC2 UDP传输，bing <test_udp_port2> <pc_ip2>
    3.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    4.target1上使用步骤3创建的socket1，往pc_ip，test_tcp_port1上发送10字节数据
    5.target1上使用步骤3创建的socket1，往pc_ip2，test_tcp_port2上发送10字节数据
  sub module: UDP
  summary: (special case)AP mode, sendto test. use different ip, port
  test environment: SSC_T2_2
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0110
  SDK: |-
    8266_NonOS
    8266_RTOS
  Test App: SSC
  allow fail: 1/3
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip_wifi> -p <test_udp_port1> -l 1
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 1
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip_wifi> -p <test_udp_port1> -l 1472
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 1472
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip_wifi> -p <test_udp_port1> -l 1473
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC_COM NC SOC_RECVFROM
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip_wifi> -p <test_udp_port1> -l 1472 -n 10
      -j 20
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 14720
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK,没收到UDP包
    6.OK
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip>
    2.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    3.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送1字节数据
    4.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送1472字节数据
    5.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送1473字节数据
    6.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送1472*10字节数据
  sub module: UDP
  summary: AP mode, sendto test with different length
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0110
  SDK: ESP32_IDF
  Test App: SSC
  allow fail: 1/3
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip_wifi> -p <test_udp_port1> -l 1
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 1
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip_wifi> -p <test_udp_port1> -l 1472
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 1472
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip_wifi> -p <test_udp_port1> -l 1473
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC_COM C SOC_RECVFROM
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip>
    2.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    3.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送1字节数据
    4.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送1472字节数据
    5.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送1473字节数据
  sub module: UDP
  summary: AP mode, sendto test with different length
  test environment: SSC_T1_7
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0111
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: 1/3
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 ap -S -s <target_ssid> -p <target_password> -t <target_auth_enum>
    - - R SSC1 C +SAP:OK
  - - WIFI <pc_wifi_nic> CONN <target_ssid> <target_password> <pc_ip_wifi> <target_auth>
      <target_encryption>
    - - R PC_COM NC ERROR C +WIFICONN:OK
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password>
    - - R SSC2 RE "\+JAP:CONNECTED,%%s"%%(<target_ssid>)
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC2 ip
    - - R SSC2 A <ssc2_ip>:STAIP:(.+)\r\n
  - - SSC SSC2 soc -B -t UDP -p <test_udp_port2>
    - - R SSC2 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  - - SOC SOC1 SENDTO 5 <test_udp_port1> <target_ap_ip>
    - - R SSC1 RE "RECVFROM:%%s,5,%%s,%%u"%%(<sock2>,<pc_ip_wifi>,<test_udp_port1>)
  - - SSC SSC2 soc -S -s <sock1> -i <target_ap_ip> -p <test_udp_port1> -l 5
    - - R SSC1 RE "RECVFROM:%%s,5,%%s,%%u"%%(<sock2>,<ssc2_ip>,<test_udp_port2>)
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK,没收到UDP包
    6.OK
    7.OK
  initial condition: T2O_1
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip>
    2.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    3.PC往8266上发送1字节数据
    4.PC往8266上发送1472字节数据
    5.PC往8266上发送1473字节数据
    6.PC上SOC2 UDP传输，bing <test_udp_port2> <pc_ip2>
    7.PC往8266上发送1472字节数据
  sub module: UDP
  summary: (special case)AP mode, recvfrom basic test
  test environment: SSC_T2_2
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0112
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    2.关闭socket1
  sub module: UDP
  summary: AP mode, close UDP sockets test
  test environment: SSC_T1_8
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0113
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 RE BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port2>
    - - R SSC1 RE BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port3>
    - - R SSC1 RE BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port4>
    - - R SSC1 RE BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port5>
    - - R SSC1 RE BIND:(\d+),OK
  execution time: 0.0
  expected result: |-
    1.ok
    2.ok
    3.ok
    4.ok
    5.ok
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    2.target1上UDP传输，Bind socket2,本地ip target_udp_port2
    3.target1上UDP传输，Bind socket3,本地ip target_udp_port3
    4.target1上UDP传输，Bind socket4,本地ip target_udp_port4
    5.target1上UDP传输，Bind socket5,本地ip target_udp_port5
  sub module: UDP
  summary: AP mode, create max udp socket test
  test environment: SSC_T1_8
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0114
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -I
    - - P SSC1 RE "SOCINFO:%%s,1,.+,%%d"%%(<sock1>,<test_udp_port1>)
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    2.target1上查询创建socket信息
  sub module: UDP
  summary: AP mode, UDP get active socket info test
  test environment: SSC_T1_8
  test point 1: basic function
  test point 2: use UDP SAP (socket/espconn API) with different parameter
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0201
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1> -w 0
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SOC SOC1 SENDTO 1472 <test_udp_port1> <target_ip>
    - - ''
  - - SOC SOC1 SENDTO 1472 <test_udp_port1> <target_ip>
    - - ''
  - - SOC SOC1 SENDTO 1472 <test_udp_port1> <target_ip>
    - - ''
  - - SOC SOC1 SENDTO 1472 <test_udp_port1> <target_ip>
    - - ''
  - - SOC SOC1 SENDTO 1472 <test_udp_port1> <target_ip>
    - - ''
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.PC OK
    5.PC OK
    6.PC OK
    7.PC OK
    8.PC OK SOC_CLOSE=SOC1
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip>
    2.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    3.target1上关闭工作线程
    4.PC往8266上发送1472字节数据
    5.PC往8266上发送1472字节数据
    6.PC往8266上发送1472字节数据
    7.PC往8266上发送1472字节数据
    8.PC往8266上发送1472字节数据
  sub module: UDP
  summary: STA mode, UDP recv buffer test
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: use UDP SAP (socket/espconn API) in different state
  version: v2 (2016-10-19)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0202
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip_wifi>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SOC SOC1 SENDTO 1472 <test_udp_port1> <target_ap_ip>
    - - ''
  - - SOC SOC1 SENDTO 1472 <test_udp_port1> <target_ap_ip>
    - - ''
  - - SOC SOC1 SENDTO 1472 <test_udp_port1> <target_ap_ip>
    - - ''
  - - SOC SOC1 SENDTO 1472 <test_udp_port1> <target_ap_ip>
    - - ''
  - - SOC SOC1 SENDTO 1472 <test_udp_port1> <target_ap_ip>
    - - ''
  - - SOC SOC1 SENDTO 1472 <test_udp_port1> <target_ap_ip>
    - - ''
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.PC OK
    5.PC OK
    6.PC OK
    7.PC OK
    8.PC OK SOC_CLOSE=SOC1
  initial condition: APM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip_wifi>
    2.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    3.target1上关闭工作线程
    4.PC往8266上发送1472字节数据
    5.PC往8266上发送1472字节数据
    6.PC往8266上发送1472字节数据
    7.PC往8266上发送1472字节数据
    8.PC往8266上发送1472字节数据
  sub module: UDP
  summary: AP mode, UDP recv buffer test
  test environment: SSC_T1_7
  test point 1: abnormal/special use
  test point 2: use UDP SAP (socket/espconn API) in different state
  version: v2 (2016-10-19)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0301
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: 1/3
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -i <target_ip> -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 5
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 5
  - - SSC SSC1 sta -D
    - - P SSC1 C +QAP:OK
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 5
    - - P SSC1 RE SEND:\d+,ERROR
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip>
    2.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    3.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送5字节数据
    4.断开与AP 连接
    5.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送5字节数据
  sub module: UDP
  summary: do UDP send after WIFI disconnected
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: UDP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0302
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: 2/3
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 5
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 5
  - - SSC SSC1 sta -D
    - - P SSC1 C +QAP:OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  execution time: 0.0
  expected result: |
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip>
    2.target1上UDP传输，Bind socket1,本地ip target_udp_port1
    3.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送5字节数据
    4.断开与AP 连接
    5.关闭建立的socket1连接
  sub module: UDP
  summary: "close UDP  socket after WIFI \ndisconnected"
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: UDP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0303
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: 1/3
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -i <target_ip> -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 5
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 5
  - - SSC SSC1 op -S -o 2
    - - P SSC1 C +MODE:OK
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 5
    - - P SSC1 RE SEND:(\d+),ERROR
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: "1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip>\n2.target1上UDP传输，Bind socket1,本地ip
    target_udp_port1\n3.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送5字节数据\n4.修改8266的Mode为softAP
    mode \n5.8266往PC上发送5字节数据"
  sub module: UDP
  summary: do UDP send after mode changed
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: UDP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0304
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: 1/3
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 5
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 5
  - - SSC SSC1 op -S -o 2
    - - P SSC1 C +MODE:OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: "1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip>\n2.target1上UDP传输，Bind socket1,本地ip
    target_udp_port1\n3.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送5字节数据\n4.修改8266的Mode为softAP
    mode \n5.关闭建立的socket1连接"
  sub module: UDP
  summary: close UDP socket after mode changed
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: UDP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0305
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: 1/3
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 5
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 5
  - - NIC <pc_nic> DISABLED
    - - R PC_COM C OK
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK
    4.OK
    5.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: "1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip>\n2.target1上UDP传输，Bind socket1,本地ip
    target_udp_port1\n3.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送5字节数据\n4.PC上网卡禁止掉
    \n5.关闭建立的socket1连接"
  sub module: UDP
  summary: close UDP socket after PC NIC disabled
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: UDP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0306
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: 1/3
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 5
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 5
  - - SSC SSC1 dhcp -E -o 1
    - - R SSC1 C +DHCP:STA,OK
  - - SSC SSC1 ip -S -o 1 -i 192.168.111.210
    - - P SSC1 C +IP:OK
  - - SSC SSC1 ip -Q -o 1
    - - R SSC1 C +STAIP:192.168.111.210
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 1
    - - P SSC1 RE SEND:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK; PC TCP server accept 成功
    4.OK
    5.OK
    6.OK
    7.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: "1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip>\n2.target1上UDP传输，Bind socket1,本地ip
    target_udp_port1\n3.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送5字节数据\n4.关闭8266的DHCP
    1\n5.设置sta ip \n6.查询sta ip 地址是否生效\n7.8266往PC上发送5字节数据"
  sub module: UDP
  summary: do UDP send after IP changed
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: UDP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0307
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: 1/3
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SOC SOC1 BIND <test_udp_port1> <pc_ip>
    - - R SOC_COM L OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -l 5
    - - P SSC1 RE SEND:(\d+),OK
      - P SOC1 UL 5
  - - SSC SSC1 dhcp -E -o 1
    - - R SSC1 C +DHCP:STA,OK
  - - SSC SSC1 ip -S -o 1 -i 192.168.111.210
    - - P SSC1 C +IP:OK
  - - SSC SSC1 ip -Q -o 1
    - - R SSC1 C +STAIP:192.168.111.210
  - - SSC SSC1 soc -T -s <sock1>
    - - R SSC1 RE CLOSE:\d+,OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
    3.OK; PC TCP server accept 成功
    4.OK
    5.OK
    6.OK
    7.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: "1.PC上SOC1 UDP传输，bing <test_udp_port1> <pc_ip>\n2.target1上UDP传输，Bind socket1,本地ip
    target_udp_port1\n3.target1上使用步骤2创建的socket1，往pc_ip，test_tcp_port1上发送5字节数据\n4.关闭8266的DHCP
    1\n5.设置sta ip \n6.查询sta ip 地址是否生效\n7.关闭建立的socket1连接"
  sub module: UDP
  summary: close UDP  socket after IP changed
  test environment: SSC_T1_6
  test point 1: abnormal/special use
  test point 2: UDP handling abnormal event
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0401
  SDK: |-
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 C +BIND:ERROR
  execution time: 0.0
  expected result: |-
    1.OK
    2.ERROR
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.target1上创建UDP socket,bind test_udp_port1
    2.target1上创建UDP socket,bind test_udp_port1
  sub module: UDP
  summary: Test socket with so_reuseaddr option closed on UDP submodule
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_0402
  SDK: ESP32_IDF
  Test App: SSC_OPTION
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.find esp-idf/components/lwip/include/lwip/lwip/opt.h file, make "#define SO_REUSE  1" instead of "#define SO_REUSE  0"
    2.switch to esp-idf/SSC, run "./gen_misc_ng.sh SSC_OPTION" and "make flash", then run the test case normally
    3.target1上创建UDP socket,bind test_udp_port1
    4.target1上创建UDP socket,bind test_udp_port1
  sub module: UDP
  summary: Test socket with so_reuseaddr option opened that build two udp sockets
    by binding same port on ESP32
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_UDP_0403
  SDK: 8266_RTOS
  Test App: SSC
  allow fail: ''
  auto test: 'No'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock2>:BIND:(\d+),OK
  execution time: 0.0
  expected result: |-
    1.OK
    2.OK
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1.find ESP8266_RTOS_SDK/include/lwip/lwip/opt.h file, make "#define SO_REUSE  1" instead of "#define SO_REUSE  0"
    2.switch to ESP8266_RTOS_SDK/third_party, run "./make_lib.sh lwip" risc,then continuely run "ll ../lib"
    3.switch to ESP8266_RTOS_SDK/SSC, run "./gen_misc_rtos.sh SSC", then run the test case normally
    4.target1上创建UDP socket,bind test_udp_port1
    5.target1上创建UDP socket,bind test_udp_port1
  sub module: UDP
  summary: Test socket with so_reuseaddr option opened that build two udp sockets
    by binding same port on 8266_RTOS
  test environment: SSC_T1_6
  test point 1: basic function
  test point 2: socket test with different option
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_5001
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - UDPStress/UDPSendRecv
  - - send_len = 1460
    - - dummy
  - - test_time = 300
    - - ''
  - - duplex = True
    - - ''
  - - conn_num = 5
    - - ''
  - - send_delay = 20
    - - ''
  execution time: 12.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: T2_1
  level: Integration
  module: TCPIP
  steps: |-
    1. sta connect to softap
    2. create multiple udp
    3. do send/recv on all udp
  sub module: UDP
  summary: UDP send/recv stress test
  test environment: SSC_T2_5
  test point 1: stress
  test point 2: UDP stress test
  version: v2 (2016-11-15)
- CI ready: 'No'
  ID: TCPIP_UDP_5002
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - UDPStress/UDPPacketLose
  - - test_time = 5
    - - dummy
  - - send_len = 1460
    - - ''
  - - pc_send = True
    - - ''
  - - target_send = False
    - - ''
  - - delay = 10
    - - ''
  execution time: 1.0
  expected result: |-
    1. succeed
    2. succeed
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1. scan AP to get AP RSSI
    2. create UDP and recv data for several seconds
  sub module: UDP
  summary: UDP loss rate on DUT Rx
  test environment: SSC_T1_6
  test point 1: Performance test
  test point 2: UDP stress test
  version: v1 (2016-10-18)
- CI ready: 'No'
  ID: TCPIP_UDP_5003
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - UDPStress/UDPPacketLose
  - - test_time = 5
    - - dummy
  - - send_len = 1460
    - - ''
  - - pc_send = False
    - - ''
  - - target_send = True
    - - ''
  - - delay = 10
    - - ''
  execution time: 1.0
  expected result: |-
    1. succeed
    2. succeed
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1. scan AP to get AP RSSI
    2. create UDP and recv data for several seconds
  sub module: UDP
  summary: UDP loss rate on DUT Tx
  test environment: SSC_T1_6
  test point 1: Performance test
  test point 2: UDP stress test
  version: v1 (2016-10-18)
- CI ready: 'No'
  ID: TCPIP_UDP_5004
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - UDPStress/UDPBroadcast
  - - test_time = 30
    - - dummy
  - - send_len = 20
    - - ''
  - - pc_send = True
    - - ''
  - - target_send = False
    - - ''
  - - delay = 10
    - - ''
  execution time: 1.0
  expected result: |-
    1. succeed
    2. succeed
  initial condition: STAM2
  level: Integration
  module: TCPIP
  steps: |-
    1. scan AP to get AP RSSI
    2. create UDP and recv data for several seconds
  sub module: UDP
  summary: UDP broadcase loss rate on DUT Rx
  test environment: SSC_T1_6
  test point 1: Performance test
  test point 2: UDP stress test
  version: v1 (2016-10-18)
- CI ready: 'No'
  ID: TCPIP_UDP_5005
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - UDPStress/UDPMultiSTASendRecv
  - - send_len = 1460
    - - dummy
  - - test_time = 300
    - - ''
  - - server_echo = True
    - - ''
  - - sta_number = 5
    - - ''
  - - send_delay = 500
    - - ''
  execution time: 5.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: None
  level: Integration
  module: TCPIP
  steps: |-
    1. 5 sta connect to softap
    2. create udp socket on all sta
    3. all sta do udp send/recv
  sub module: UDP
  summary: 1 SoftAP 5 STA, create UDP server on one STA, create UDP client on other
    STA, do UDP send/recv
  test environment: SSC_T6_1
  test point 1: stress
  test point 2: UDP stress test
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_UDP_5006
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - UDPStress/UDPSTAMultiSocketSendRecv
  - - send_len = 1460
    - - dummy
  - - test_time = 300
    - - ''
  - - server_echo = True
    - - ''
  - - sta_number = 2
    - - ''
  - - conn_number = 6
    - - ''
  - - send_delay = 500
    - - ''
  execution time: 5.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: None
  level: Integration
  module: TCPIP
  steps: |-
    1. 2 sta connect to softap
    2. create multi udp socket on all sta
    3. all sta do udp send/recv
  sub module: UDP
  summary: 1 SoftAP 2 STA, create multi UDP socket on STA, do UDP send/recv
  test environment: SSC_T3_1
  test point 1: stress
  test point 2: UDP stress test
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_UDP_5007
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - UDPStress/SoftAPSTAUDPLose
  - - test_time = 60
    - - dummy
  - - send_len = 1460
    - - ''
  - - softap_send = False
    - - ''
  - - sta_send = True
    - - ''
  - - delay = 10
    - - ''
  execution time: 1.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: T2_1
  level: Integration
  module: TCPIP
  steps: |-
    1.sta connect to softAP
    2.sta softAP bind UPD socket
    3.sta send UDP to softAP, softAP calculate the packet lose
  sub module: UDP
  summary: STA connect to softAP, STA send UDP to softAP, calculate the UDP lose on
    softAP
  test environment: SSC_T2_5
  test point 1: Performance test
  test point 2: UDP stress test
  version: v1 (2016-10-18)
- CI ready: 'No'
  ID: TCPIP_UDP_5008
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - UDPStress/SoftAPSTAUDPLose
  - - test_time = 60
    - - dummy
  - - send_len = 1460
    - - ''
  - - softap_send = True
    - - ''
  - - sta_send = False
    - - ''
  - - delay = 10
    - - ''
  execution time: 1.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: T2_1
  level: Integration
  module: TCPIP
  steps: |-
    1.sta connect to softAP
    2.sta softAP bind UPD socket
    3.softAP send UDP to STA, STA calculate the packet lose
  sub module: UDP
  summary: STA connect to softAP, softAP send UDP to STA, calculate the UDP lose on
    STA
  test environment: SSC_T2_5
  test point 1: Performance test
  test point 2: UDP stress test
  version: v1 (2016-10-18)
- CI ready: 'No'
  ID: TCPIP_UDP_5101
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Performance
  cmd set:
  - UDPStress/UDPThroughput
  - - send_len = 1460
    - - dummy
  - - tx_enable = True
    - - ''
  - - rx_enable = False
    - - ''
  - - measure_period = 30
    - - ''
  execution time: 2.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: STAM1
  level: Integration
  module: TCPIP
  steps: |-
    1. config attenuator (0-59)
    2. scan AP to get AP RSSI
    3. create UDP and send data for several seconds
    Loop step 1 - 3
  sub module: UDP
  summary: UDP throughput Tx in shield box
  test environment: SSC_T1_ShieldBox
  test point 1: performance
  test point 2: UDP throughput
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_UDP_5102
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Performance
  cmd set:
  - UDPStress/UDPThroughput
  - - send_len = 1460
    - - dummy
  - - tx_enable = False
    - - ''
  - - rx_enable = True
    - - ''
  - - measure_period = 30
    - - ''
  execution time: 2.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: STAM1
  level: Integration
  module: TCPIP
  steps: |-
    1. config attenuator (0-59)
    2. scan AP to get AP RSSI
    3. create UDP and recv data for several seconds
    Loop step 1 - 3
  sub module: UDP
  summary: UDP throughput Rx in shield box
  test environment: SSC_T1_ShieldBox
  test point 1: performance
  test point 2: UDP throughput
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_UDP_5201
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - UDPStress/EthUDPThroughput
  - - send_len = 1460
    - - dummy
  - - tx_enable = True
    - - ''
  - - rx_enable = False
    - - ''
  - - measure_period = 30
    - - ''
  - - test_count = 5
    - - ''
  execution time: 0.5
  expected result: |-
    1. succeed
    2. succeed
  initial condition: T1_ETH
  level: Integration
  module: TCPIP
  steps: |-
    1. DUT open eth and get ip
    2. DUT band socket and send packet to PC for several secends
    Loop for step 1-2
  sub module: UDP
  summary: UDP throughput Tx for Ethernet
  test environment: ETH_T1_1
  test point 1: stress
  test point 2: UDP stress test
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_UDP_5202
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - UDPStress/EthUDPThroughput
  - - send_len = 1460
    - - dummy
  - - tx_enable = False
    - - ''
  - - rx_enable = True
    - - ''
  - - measure_period = 30
    - - ''
  - - test_count = 5
    - - ''
  execution time: 0.5
  expected result: |-
    1. succeed
    2. succeed
  initial condition: T1_ETH
  level: Integration
  module: TCPIP
  steps: |-
    1. DUT open eth and get ip
    2. DUT band socket and PC send packet to DUT for several secends
    Loop for step 1-2
  sub module: UDP
  summary: UDP throughput Rx for Ethernet
  test environment: ETH_T1_1
  test point 1: stress
  test point 2: UDP stress test
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_UDP_5301
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - UDPStress/EthUDPPacketLose
  - - test_time = 30
    - - dummy
  - - send_len = 1460
    - - ''
  - - pc_send = True
    - - ''
  - - target_send = False
    - - ''
  - - delay = 10
    - - ''
  execution time: 0.5
  expected result: |-
    1. succeed
    2. succeed
  initial condition: T1_ETH
  level: Integration
  module: TCPIP
  steps: |-
    1. DUT open eth and get ip
    2. DUT band socket,PC send packet to DUT for several secends
    3. DUT calculate the packet lose rate
  sub module: UDP
  summary: UDP loss rate on DUT Rx for Eth
  test environment: ETH_T1_1
  test point 1: Performance test
  test point 2: UDP stress test
  version: v1 (2016-10-18)
- CI ready: 'No'
  ID: TCPIP_UDP_5401
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - UDPStress/UDPSoftAPSTAThroughput
  - - send_len = 1460
    - - dummy
  - - sta_rx_enable = False
    - - ''
  - - sta_tx_enable = True
    - - ''
  - - measure_period = 15
    - - ''
  execution time: 1.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
    4. succeed
  initial condition: T2_1
  level: Integration
  module: TCPIP
  steps: |-
    1. STA connect softAP
    2. bind UDP socket
    3. send UDP packet
    4. calculate the troughput
  sub module: UDP
  summary: STA UDP throughput Tx while connected with softAP
  test environment: SSC_T2_ShieldBox2
  test point 1: Performance test
  test point 2: UDP throughput
  version: v1 (2016-10-18)
- CI ready: 'No'
  ID: TCPIP_UDP_5402
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - UDPStress/UDPSoftAPSTAThroughput
  - - send_len = 1460
    - - dummy
  - - sta_rx_enable = True
    - - ''
  - - sta_tx_enable = False
    - - ''
  - - measure_period = 15
    - - ''
  execution time: 1.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
    4. succeed
  initial condition: T2_1
  level: Integration
  module: TCPIP
  steps: |-
    1. STA connect softAP
    2. bind UDP socket
    3. send UDP packet
    4. calculate the troughput
  sub module: UDP
  summary: STA UDP throughput Rx while connected with softAP
  test environment: SSC_T2_ShieldBox2
  test point 1: Performance test
  test point 2: UDP throughput
  version: v1 (2016-10-18)
- CI ready: 'Yes'
  ID: TCPIP_UDP_5501
  SDK: 'ESP32_IDF'
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - UDPStress/UDPSendRecvIPv6
  - - send_len = 1460
    - [dummy]
  - - test_time = 300
    - ['']
  - - duplex = True
    - ['']
  - - conn_num = 5
    - ['']
  - - send_delay = 20
    - ['']
  execution time: 12.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: T2_1
  level: Integration
  module: TCPIP
  steps: |-
    1. sta connect to softap
    2. create multiple udp
    3. do send/recv on all udp
  sub module: UDP
  summary: UDP send/recv stress test with UDPSendRecvIPv6(IPv6)
  test environment: SSC_T2_5
  test point 1: stress
  test point 2: UDP stress test(IPv6)
  version: v2 (2016-11-15)
- CI ready: 'Yes'
  ID: TCPIP_UDP_5502
  SDK: 'ESP32_IDF'
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - UDPStress/UDPAPSTASendRecvIPv6
  - - send_len = 1460
    - [dummy]
  - - test_time = 300
    - ['']
  - - duplex = True
    - ['']
  - - conn_num = 5
    - ['']
  - - send_delay = 20
    - ['']
  execution time: 12.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: T3_1
  level: Integration
  module: TCPIP
  steps: |-
    1. sta connect to softap
    2. create multiple udp
    3. do send/recv on all udp
  sub module: UDP
  summary: UDP send/recv stress test with UDPAPSTASendRecvIPv6(IPv6)
  test environment: SSC_T3_1
  test point 1: stress
  test point 2: UDP stress test(IPv6)
  version: v2 (2016-11-15)
- CI ready: 'No'
  ID: TCPIP_UDP_9901
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: IOT
  cmd set:
  - UDPStress/UDPThroughputCompatibility
  - - send_len = 1460
    - - dummy
  - - test_times = 10
    - - ''
  - - tx_enable = True
    - - ''
  - - rx_enable = False
    - - ''
  - - measure_period = 30
    - - ''
  execution time: 2.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: STAM1
  level: Integration
  module: TCPIP
  steps: |-
    1. scan AP to get AP RSSI
    2. create TCP connection and send data for several seconds
    3. calculate the throughput
    Loop step 1 - 3
  sub module: UDP
  summary: UDP throughput Tx Compatibility test in shield box
  test environment: SSC_T1_ShieldBox
  test point 1: performance
  test point 2: UDP throughput Compatibility test
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: TCPIP_UDP_9902
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: IOT
  cmd set:
  - UDPStress/UDPThroughputCompatibility
  - - send_len = 1460
    - - dummy
  - - test_times = 10
    - - ''
  - - tx_enable = False
    - - ''
  - - rx_enable = True
    - - ''
  - - measure_period = 30
    - - ''
  execution time: 2.0
  expected result: |-
    1. succeed
    2. succeed
    3. succeed
  initial condition: STAM1
  level: Integration
  module: TCPIP
  steps: |-
    1. scan AP to get AP RSSI
    2. create TCP connection and send data for several seconds
    3. calculate the throughput
    Loop step 1 - 3
  sub module: UDP
  summary: UDP throughput Rx Compatibility test in shield box
  test environment: SSC_T1_ShieldBox
  test point 1: performance
  test point 2: UDP throughput Compatibility test
  version: v1 (2016-8-15)
