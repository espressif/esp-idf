test cases:
- CI ready: 'Yes'
  ID: WIFI_SCAN_0101
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC2 sta -S -s .,juhg123
    - - 'R SSC2 NC +SCAN: C +SCANDONE'
  - - SSC SSC1 ap -S -s <target_tmp_ssid> -p 123456789 -t 3
    - - R SSC1 C +SAP:OK
  - - SSC SSC2 sta -S -s <target_tmp_ssid>
    - - 'R SSC2 C +SCAN:'
      - R SSC2 P <target_tmp_ssid>
      - 'R SSC2 NC +SCAN: C +SCANDONE'
  execution time: 0.0
  expected result: |-
    1.target 2上不能scan  .,juhg123
    2.target1 set AP
    3.target2上查询到<target_tmp_ssid>
  initial condition: T2_1
  level: Integration
  module: WIFI MAC
  steps: |-
    1.target 2  scan  .,juhg123
    2.target1下设置ssid 和pwd 加密方式
    3.target2  scan <target_tmp_ssid>
  sub module: WIFI Scan
  summary: scan with scan config ssid
  test environment: SSC_T2_5
  test point 1: basic function
  test point 2: scan with different config
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: WIFI_SCAN_0102
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC2 sta -S -b ff:ff:ff:ff:ff:11
    - - 'R SSC2 NC +SCAN: C +SCANDONE'
  - - SSC SSC2 sta -S -b <target_ap_mac>
    - - R SSC2 RE "\+SCAN:.+,%%s"%%(<target_ap_mac>)
      - 'R SSC2 NC +SCAN: C +SCANDONE'
  execution time: 0.0
  expected result: |-
    1.target2 上不能查询到此mac
    2.target2上查询到<target_ap_mac>
  initial condition: T2_1
  level: Integration
  module: WIFI MAC
  steps: |-
    1.target2 上查询此macff:ff:ff:ff:ff:11
    2.target2上查询<target_ap_mac>
  sub module: WIFI Scan
  summary: scan with scan config bssid
  test environment: SSC_T2_5
  test point 1: basic function
  test point 2: scan with different config
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: WIFI_SCAN_0103
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 sta -D
    - - 'R SSC1 C +QAP:'
  - - SSC SSC1 ap -S -s <target_tmp_ssid> -p 123456789 -t 3 -n 6
    - - R SSC1 C +SAP:OK
  - - SSC SSC2 sta -S -n 5
    - - R SSC2 NP <target_tmp_ssid> C +SCANDONE
  - - SSC SSC2 sta -S -n 6
    - - 'R SSC2 C +SCAN:'
      - R SSC2 P <target_tmp_ssid>
  execution time: 0.0
  expected result: |-
    1.target1 QAP
    2. target1 set AP,set channel 6
    3.target2 上scan不到 channel 5
    4.target2 上查询channel 6的<target_tmp_ssid>
  initial condition: T2_1
  level: Integration
  module: WIFI MAC
  steps: |-
    1.target1 断开连接AP
    2.target1下设置ssid 和pwd 加密方式,set channel 6
    3.target2 上scan channel 5
    4.target2 上查询channel 6的<target_tmp_ssid>
  sub module: WIFI Scan
  summary: scan with scan config channel
  test environment: SSC_T2_5
  test point 1: basic function
  test point 2: scan with different config
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: WIFI_SCAN_0104
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 ap -S -s <target_tmp_ssid> -p 123456789 -t 3 -h 0
    - - R SSC1 C +SAP:OK
  - - SSC SSC2 sta -D
    - - R SSC2 C OK
  - - SSC SSC2 sta -S -h 0
    - - R SSC2 P <target_tmp_ssid> C +SCANDONE
  - - SSC SSC2 sta -S -h 1
    - - R SSC2 P <target_tmp_ssid> C +SCANDONE
  - - SSC SSC1 ap -S -s <target_tmp_ssid> -p 123456789 -h 1
    - - R SSC1 C +SAP:OK
  - - SSC SSC2 sta -S -h 0
    - - R SSC2 NP <target_tmp_ssid> C +SCANDONE
  - - SSC SSC2 sta -S -h 1
    - - R SSC2 P <target_ap_mac> C +SCANDONE
  execution time: 0.0
  expected result: |-
    1.target1 set AP,set ssid broad cast
    2.target 2上scan <target_tmp_ssid>
    3.target 2上scan <target_tmp_ssid>
    4.target1 set AP,set ssid hidden,
    5.target 2上不能查询到 <target_tmp_ssid>
    6.target 2上查询到<target_ap_mac>
  initial condition: T2_1
  level: Integration
  module: WIFI MAC
  steps: |-
    1.target1下设置ssid 和pwd 加密方式,set ssid broad cast
    2.target 2上scan <target_tmp_ssid>
    3.target 2上scan <target_tmp_ssid>
    4.target1下设置ssid 和pwd 加密方式,set ssid hidden,
    5.target 2上查询 <target_tmp_ssid>
    6.target 2上查询<target_ap_mac>
  sub module: WIFI Scan
  summary: scan with scan config show hidden
  test environment: SSC_T2_5
  test point 1: basic function
  test point 2: scan with different config
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: WIFI_SCAN_0105
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 sta -D
    - - 'R SSC1 C +QAP:'
  - - SSC SSC1 ap -S -s <target_tmp_ssid> -p 123456789 -t 3 -h 0 -n 11
    - - R SSC1 C +SAP:OK
  - - SSC SSC2 sta -S -s <target_tmp_ssid> -b <target_ap_mac> -n 11
    - - R SSC2 P <target_tmp_ssid> C +SCANDONE
  - - SSC SSC2 sta -S -s <target_ssid> -b <target_ap_mac> -n 11
    - - R SSC2 NP <target_tmp_ssid> C +SCANDONE
  - - SSC SSC2 sta -S -s <target_tmp_ssid> -b ff:ff:ff:ff:ff:11 -n 11
    - - R SSC2 P <target_tmp_ssid>
      - R SSC2 NP <target_tmp_ssid> C +SCANDONE
  - - SSC SSC2 sta -S -s <target_tmp_ssid> -b <target_ap_mac> -n 10
    - - R SSC2 P <target_tmp_ssid>
      - R SSC2 NP <target_tmp_ssid> C +SCANDONE
  execution time: 0.0
  expected result: |-
    1.target1 QAP
    2. target1 set AP,set ssid broad cast,set channel 11
    3.target2 上查询到<target_tmp_ssid>
    4.target2 上查询不到<target_tmp_ssid>
    5.target2 上查询不到<target_tmp_ssid>
    6.target2 上查询不到<target_tmp_ssid>
  initial condition: T2_1
  level: Integration
  module: WIFI MAC
  steps: |-
    1.target1 QAP
    2. target1 set AP,set ssid broad cast,set channel 11
    3.target2 上查询到<target_tmp_ssid>
    4.target2 上查询不到<target_tmp_ssid>
    5.target2 上查询不到<target_tmp_ssid>
    6.target2 上查询不到<target_tmp_ssid>
  sub module: WIFI Scan
  summary: scan with several configs
  test environment: SSC_T2_5
  test point 1: basic function
  test point 2: scan with different config
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: WIFI_SCAN_0201
  SDK: ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 phy -S -o 1 -m b
    - - R SSC1 C +SPHY:protocol
  - - SSC SSC1 sta -S
    - - R SSC1 P <ap_ssid_11b> P <ap_ssid_11g> P <ap_ssid_11n_20> P <ap_ssid_11n_40>
  - - SSC SSC1 phy -S -o 1 -m g
    - - R SSC1 C +SPHY:protocol
  - - SSC SSC1 sta -S
    - - R SSC1 P <ap_ssid_11b> P <ap_ssid_11g> P <ap_ssid_11n_20> P <ap_ssid_11n_40>
  - - SSC SSC1 phy -S -o 1 -m n -b 20
    - - R SSC1 C +SPHY:protocol
  - - SSC SSC1 sta -S
    - - R SSC1 P <ap_ssid_11b> P <ap_ssid_11g> P <ap_ssid_11n_20> P <ap_ssid_11n_40>
  - - SSC SSC1 phy -S -o 1 -m n -b 40
    - - R SSC1 C +SPHY:protocol
  - - SSC SSC1 sta -S
    - - R SSC1 P <ap_ssid_11b> P <ap_ssid_11g> P <ap_ssid_11n_20> P <ap_ssid_11n_40>
  execution time: 0.0
  expected result: |-
    3. find all 3 ext APs
    5. find all 3 ext APs
    7. find all 3 ext APs
    9. find all 3 ext APs
  initial condition: STAM1
  level: Integration
  module: WIFI MAC
  steps: |-
    1. 3 ext APs in 11b, 11g, 11n mode
    2. STA in 11b mode
    3. do all channel scan
    4. STA in 11g mode
    5. do all channel scan
    6. STA in 11n ht20 mode
    7. do all channel scan
    8. STA in 11n ht40 mode
    9. do all channel scan
  sub module: WIFI Scan
  summary: STA in differnt PHY mode to scan AP in different PHY mode
  test environment: SSC_T2_PhyMode
  test point 1: basic function
  test point 2: Scan in different mode and channel
  version: v1 (2015-8-15)
- CI ready: 'No'
  ID: WIFI_SCAN_0202
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 ap -S -s <target_ssid> -p <target_password> -t <target_auth_enum>
    - - R SSC1 C +SAP:OK
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -d 0 -b <target1_ap_mac>
    - - P SSC2 C +JAP:CONNECTED
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -d 1 -b <target1_ap_mac>
    - - P SSC2 C +JAP:CONNECTED
  execution time: 0.0
  expected result: |-
    1.OK
    2.ok
    3.ok
  initial condition: T2_1
  level: Integration
  module: WIFI MAC
  steps: |-
    1.target1下设置ssid 和pwd 加密方式
    2.target2 jap
    3.target2 conn target1 by bssid
  sub module: WIFI Scan
  summary: do scan/JAP/SAP with bssid set config
  test environment: SSC_T2_5
  test point 1: basic function
  test point 2: scan function test
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: WIFI_SCAN_0203
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 ap -S -s <target_ssid> -p <target_password> -t 3
    - - R SSC1 C +SAP:OK
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 0 -j 0
    - - P SSC2 C +JAP:CONNECTED
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 0 -j 1
    - - P SSC2 C +JAP:CONNECTED
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 0 -j 2
    - - P SSC2 C +JAP:CONNECTED
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 0 -j 3
    - - P SSC2 C +JAP:CONNECTED
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 0 -j 5
    - - ''
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 1 -j 1
    - - P SSC2 C +JAP:CONNECTED
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 1 -j 2
    - - P SSC2 C +JAP:CONNECTED
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 1 -j 3
    - - P SSC2 C +JAP:CONNECTED
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 1 -j 0
    - - P SSC2 C +JAP:CONNECTED
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 1 -j 4
    - - ''
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 3 -j 0
    - - P SSC2 C +JAP:CONNECTED
  execution time: 0.0
  expected result: |-
    1.OK 2.ok
    3.ok
    4.ok
    5.ok
    7.ok
    8.ok
    9.ok
    10.ok
    12.ok
  initial condition: T2_1
  level: Integration
  module: WIFI MAC
  steps: |-
    1.target1下设置ssid 和pwd 加密方式
    2.target2 fast scan and jap target1
    3.target2 jap target1 except open encrypt
    4.target2 jap target1 except open and  wep encrypt
    5.target2 jap target1 only wpa2 encrypt can be connect
    6.target2 scan all channel jap target1 except open encrypt
    7.target2 scan all channel jap target1 except open encrypt
    8.target2 scan all channel jap target1 except open and wep encrypt
    9.target2 scan all channel jap target1 only wpa2 encrypt can be connected
    10.target2 scan all channel jap target1
    11.target2 scan all channel jap target1
    12.target2 jap target1
  sub module: WIFI Scan
  summary: do scan/JAP/SAP with scan method and weakest auth mode
  test environment: SSC_T2_5
  test point 1: basic function
  test point 2: scan function test
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: WIFI_SCAN_0204
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 ap -S -s <target_ssid> -p <target_password> -t 2
    - - R SSC1 C +SAP:OK
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 0 -q 0
    - - ''
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 0 -q 128
    - - ''
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 0 -q 80
    - - P SSC2 C +JAP:CONNECTED
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 1 -q 128
    - - ''
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 1 -q 0
    - - ''
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 1 -q 80
    - - P SSC2 C +JAP:CONNECTED
  execution time: 0.0
  expected result: |-
    1.OK
    2.no exception
    3.no exception
    4.ok
    5.no exception
    6.no exception
    7.ok
  initial condition: T2_1
  level: Integration
  module: WIFI MAC
  steps: |-
    1.target1下设置ssid 和pwd 加密方式
    2.target2 fast scan and jap target1 rssi>-1
    3.target2 fast scan and jap rssi>-127
    4.target2 scan all channel and jap target1 rssi>-80
    5.target2 scan all channel and jap rssi > -127
    6.target2 scan all channel and jap rssi > -1
    7.target2 scan all channel and jap target1 rssi > -80
  sub module: WIFI Scan
  summary: do scan/JAP/SAP with scan method and weakest rssi
  test environment: SSC_T2_5
  test point 1: basic function
  test point 2: scan function test
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: WIFI_SCAN_0205
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 ap -S -s <target_ssid> -p <target_password> -t 3
    - - R SSC1 C +SAP:OK
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 1 -x 0
    - - P SSC2 C +JAP:CONNECTED
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 1 -x 1
    - - P SSC2 C +JAP:CONNECTED
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password> -f 1 -x 2
    - - P SSC2 C +JAP:CONNECTED
  execution time: 0.0
  expected result: |-
    1.OK
    2.ok
    3.ok
    4.ok
  initial condition: T2_1
  level: Integration
  module: WIFI MAC
  steps: |-
    1.target1下设置ssid 和pwd 加密方式
    2.target2 scan ap all channel and jap target1 by rssi sort
    3.target2 scan ap all channel and jap target1 by auth
    4.target2 scan ap all channel jap target1 by auth
  sub module: WIFI Scan
  summary: do scan/JAP/SAP with scan method and sort method
  test environment: SSC_T2_5
  test point 1: basic function
  test point 2: scan function test
  version: v1 (2016-8-15)
- CI ready: 'No'
  ID: WIFI_SCAN_0206
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 op -S -o 1
    - - P SSC1 C +MODE:OK
  - - SSC SSC1 op -Q
    - - P SSC1 C +CURMODE:1
  - - SSC SSC1 sta -S -t 0 -l 0 -m 0
    - - 'R SSC1 C +SCAN: C +SCANDONE'
  - - SSC SSC1 sta -S -t 0 -l 1000 -m 100
    - - 'R SSC1 C +SCAN: C +SCANDONE'
  - - SSC SSC1 sta -S -t 1 -k 0
    - - 'R SSC1 C +SCAN: C +SCANDONE'
  - - SSC SSC1 sta -S -t 1 -k 2000
    - - 'R SSC1 C +SCAN: C +SCANDONE'
  - - SSC SSC1 sta -S -t 5 -k 100
    - - 'R SSC1 C +SCAN: C +SCANDONE'
  execution time: 0.0
  expected result: |-
    1.OK
    2.ok
    3.scan ok
    4.scan ok
    5.scan ok
    6.scan ok
    7.scan ok
  initial condition: None
  level: Integration
  module: WIFI MAC
  steps: |-
    1.target set as sta
    2.check target1 work mode
    3.target1 active scan max and min time set to 0ms
    4.target1 active scan max time 1000ms min time 100ms
    5.target1 passive scan scan time 0ms
    6.target passive scan scan time 10000ms
    7.target1 scan type set to 5
  sub module: WIFI Scan
  summary: do active/passive scan
  test environment: SSC_T1_4
  test point 1: basic function
  test point 2: scan function test
  version: v1 (2016-8-15)
- CI ready: 'Yes'
  ID: WIFI_SCAN_0301
  SDK: ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 sta -S
    - - ''
  - - SSC SSC1 sta -S
    - - P SSC1 C +SCANFAIL
      - 'P SSC1 C +SCAN:'
      - R SSC1 C +SCANDONE
  execution time: 0.0
  expected result: |-
    1. second scan failed
    2. first scan succeed
  initial condition: STAM1
  level: Integration
  module: WIFI MAC
  steps: |-
    1. do all channel scan
    2. do scan before scan finished
  sub module: WIFI Scan
  summary: reject scan request before scan finished
  test environment: SSC_T1_5
  test point 1: interaction
  test point 2: Scan interact with other WiFi operation
  version: v1 (2015-8-15)
- CI ready: 'No'  # current env don't have parameter ap_channel
  ID: WIFI_SCAN_0302
  SDK: ESP32_IDF
  Test App: SSC
  allow fail: '2/3'
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 sta -C -s <ap_ssid> -p <ap_password>
    - - R SSC1 C +JAP:CONNECTED
  - - SSC SSC1 soc -B -t UDP -p <test_udp_port1>
    - - R SSC1 A <sock1>:BIND:(\d+),OK
  - - SSC SSC1 soc -S -s <sock1> -i <pc_ip> -p <test_udp_port1> -n 1000000 -j 5
    - - ''
  - - SSC SSC2 phy -S -o 1 -m b
    - - R SSC2 C +SPHY:protocol
  - - SSC SSC2 sta -S -n <ap_channel>
    - - R SSC2 P <ap_ssid>
  - - SSC SSC2 phy -S -o 1 -m g
    - - R SSC2 C +SPHY:protocol
  - - SSC SSC2 sta -S -n <ap_channel>
    - - R SSC2 P <ap_ssid>
  - - SSC SSC2 phy -S -o 1 -m n -b 20
    - - R SSC2 C +SPHY:protocol
  - - SSC SSC2 sta -S -n <ap_channel>
    - - R SSC2 P <ap_ssid>
  - - SSC SSC2 phy -S -o 1 -m n -b 40
    - - R SSC2 C +SPHY:protocol
  - - SSC SSC2 sta -S -n <ap_channel>
    - - R SSC2 P <ap_ssid>
  execution time: 0.0
  expected result: 3. target 2 able to scan AP
  initial condition: T2_2
  level: Integration
  module: WIFI MAC
  steps: |-
    1. target 1 connect to AP
    2. target 1 start sending UDP packets
    3. target 2 scan in AP channel in 11b.g,n,ht40 mode
  sub module: WIFI Scan
  summary: scan in congest channel
  test environment: SSC_T2_4
  test point 1: interaction
  test point 2: Scan interact with other WiFi operation
  version: v1 (2015-8-15)
- CI ready: 'Yes'
  ID: WIFI_SCAN_0303
  SDK: ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 sta -C -s <ap_ssid> -p <ap_password>
    - - R SSC1 C +JAP:OK
  - - SSC SSC1 sta -S
    - - P SSC1 C +SCANDONE
      - P SSC1 C +JAP:CONNECTED
  - - SSC SSC1 sta -D
    - - R SSC1 C +QAP:OK
  - - SSC SSC1 sta -S
    - - ''
  - - SSC SSC1 sta -C -s <ap_ssid> -p <ap_password>
    - - P SSC1 C +SCANDONE
      - P SSC1 C +JAP:CONNECTED
  execution time: 0.0
  expected result: |-
    2. scan succeed, JAP succeed
    5. JAP succeed, scan succeed
  initial condition: STAM1
  level: Integration
  module: WIFI MAC
  steps: |-
    1. target 1 STA join AP
    2. target 1 STA scan before JAP succeed
    3. target 1 quite AP
    4. target 1 scan
    5. target 1 JAP before scan succeed
  sub module: WIFI Scan
  summary: scan during JAP
  test environment: SSC_T1_5
  test point 1: interaction
  test point 2: Scan interact with other WiFi operation
  version: v1 (2015-8-15)
- CI ready: 'Yes'
  ID: WIFI_SCAN_0304
  SDK: ESP32_IDF
  Test App: SSC
  allow fail: ''
  auto test: 'Yes'
  category: Function
  cmd set:
  - ''
  - - SSC SSC1 ap -S -s <target_ssid> -p <target_password> -t <target_auth_enum>
    - - R SSC1 C +SAP:OK
  - - SSC SSC1 sta -D
    - - R SSC1 C OK
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password>
    - - R SSC2 C +JAP:OK
  - - SSC SSC1 sta -S
    - - P SSC1 C +SCANDONE
      - P SSC2 C +JAP:CONNECTED
  - - SSC SSC2 sta -D
    - - R SSC2 C +QAP:OK
  - - SSC SSC1 sta -S
    - - ''
  - - SSC SSC2 sta -C -s <target_ssid> -p <target_password>
    - - P SSC1 C +SCANDONE
      - P SSC2 C +JAP:CONNECTED
  execution time: 0.0
  expected result: |-
    2. scan succeed, JAP succeed
    5. JAP succeed, scan succeed
  initial condition: T2_2
  level: Integration
  module: WIFI MAC
  steps: |-
    1. target 2 STA join target 1 SoftAP
    2. target 1 STA scan before target 2 JAP succeed
    3. target 2 STA QAP
    4. target 1 STA scan
    5. target 2 STA JAP before target 1 STA scan succeed
  sub module: WIFI Scan
  summary: scan during ext STA join SoftAP
  test environment: SSC_T2_5
  test point 1: interaction
  test point 2: Scan interact with other WiFi operation
  version: v1 (2015-8-15)
- CI ready: 'No'
  ID: WIFI_SCAN_0401
  SDK: ESP32_IDF
  Test App: SSC
  auto test: 'No'
  category: Function
  cmd set: ''
  execution time: 0.3
  expected result: |-
    1. the routers are configured correctly
    3. set suc
    5. burn suc
    6. set mode ok and SSC connected to the open security mode ap auto
  initial condition: None
  level: Integration
  module: WIFI MAC
  steps: |-
    1. configure four router with the same ssid and one of them security mode is open
    2. target1 connect PC by Uart.
    3. set the ssid of the router in the manuconfig but not the password
    4. save the setting and compile
    5. burn bin files
    6. set target1 to sta mode
    7. loop 1,2,3,4 ten times
  sub module: WIFI Scan
  summary: connect open security ap
  test environment: SSC_T1_SCANSPECIFIED
  test point 1: function
  test point 2: connect open security mode ap
  version: v2 (2016-11-15)
- CI ready: 'Yes'
  ID: WIFI_SCAN_5101
  SDK: |-
    8266_NonOS
    8266_RTOS
    ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - WiFiStress/WifiSCANTime
  - - test_count = 10
    - - ''
  - - active_scan_max_time = 120
    - - ''
  - - active_scan_min_time = 20
    - - ''
  - - passive_scan_max_time = 100
    - - ''
  - - scan_mode_list = ["active_scan","passive_scan"]
    - - ''
  execution time: 0.5
  expected result: |-
    1. succeed
    3. scan time meet expectations
  initial condition: None
  level: Integration
  module: WIFI MAC
  steps: |-
    1. 1 target set to sta mode
    2. set scan mode
    3. start scan ap and check scan time
  sub module: WIFI Scan
  summary: test differnt scan mode scan time
  test environment: SSC_T1_6
  test point 1: stress
  test point 2: Sta active/passive scan stress test
  version: v2 (2017-05-10)
- CI ready: 'No'
  ID: WIFI_SCAN_5201
  SDK: ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - WiFiStress/WifiScanOptimize
  - - test_times = 10
    - - ''
  - - test_mode = "conn_by_bssid"
    - - ''
  execution time: 0.2
  expected result: |-
    1. all routers configure correctly
    3. connect success
  initial condition: None
  level: Integration
  module: WIFI MAC
  steps: |-
    1. Manually configure the two routers with the same ssid ,password and security mode
    2. SSC1 target connect PC by Uart.
    3. SSC target connect ap by the specified bssid
  sub module: WIFI Scan
  summary: connect specify ap test
  test environment: SSC_T1_SCANSPECIFIED
  test point 1: function + stress
  test point 2: connect ap by bssid
  version: v2 (2016-11-15)
- CI ready: 'No'
  ID: WIFI_SCAN_5202
  SDK: ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - WiFiStress/WifiScanOptimize
  - - test_times = 10
    - - ''
  - - test_mode = "conn_max_rssi_ap"
    - - ''
  execution time: 0.2
  expected result: |-
    1. configure ap right
    3. connect success
    4. rssi value is the largest of the four routers
  initial condition: None
  level: Integration
  module: WIFI MAC
  steps: |-
    1. Manually configure the four routers with the same ssid ,password and security mode
    2. 1 SSC target connect PC by Uart.
    3. SSC connect max rssi ap.
    4. check connection ap's rssi value
  sub module: WIFI Scan
  summary: connect max rssi ap
  test environment: SSC_T1_SCANSPECIFIED
  test point 1: function + stress
  test point 2: connect max rssi ap
  version: v2 (2016-11-15)
- CI ready: 'No'
  ID: WIFI_SCAN_5203
  SDK: ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - WiFiStress/WifiScanOptimize
  - - test_times = 10
    - - ''
  - - test_mode = "conn_most_security_ap"
    - - ''
  execution time: 0.2
  expected result: |-
    1. the routers are configured correctly
    3. connect success
    4. encryption mode is the highest in four routers
  initial condition: None
  level: Integration
  module: WIFI MAC
  steps: |-
    1. Manually configure the four routers with the same ssid ,password and different security mode
    2. target1 connect PC by Uart.
    3. target1 connect the highest encryption mode ap
    4. check connection ap's security mode
  sub module: WIFI Scan
  summary: connect most security ap
  test environment: SSC_T1_SCANSPECIFIED
  test point 1: function + stress
  test point 2: connect most security ap
  version: v2 (2016-11-15)
- CI ready: 'No'
  ID: WIFI_SCAN_5204
  SDK: ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - WiFiStress/WifiScanOptimize
  - - test_times = 10
    - - ''
  - - test_mode = "conn_setting_ap"
    - - ''
  execution time: 0.2
  expected result: |-
    1. the routers are configured correctly
    3. connect success
  initial condition: None
  level: Integration
  module: WIFI MAC
  steps: |-
    1. Manually configure the four routers with the same ssid different password
    2. target1 connect PC by Uart.
    3. target1 connect setting ap
  sub module: WIFI Scan
  summary: connect setting ap
  test environment: SSC_T1_SCANSPECIFIED
  test point 1: function + stress
  test point 2: connect setting ap
  version: v2 (2016-11-15)
- CI ready: 'No'
  ID: WIFI_SCAN_5205
  SDK: ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - WiFiStress/WifiScanOptimize
  - - test_times = 10
    - - ''
  - - test_mode = "reconn_same_ssid_ap"
    - - ''
  - - apc_num_list = [1,3]
    - - ''
  execution time: 0.5
  expected result: |-
    1. the routers are configured correctly
    3. ap1 power on
    4. connect success
    5. ap2 power on and ap1 power off
    6. connect success
  initial condition: None
  level: Integration
  module: WIFI MAC
  steps: |-
    1. Manually configure the two routers with the same ssid ,password different security mode
    2. target1 connect PC by Uart.
    3. ap1 power on by apc
    4. atrget1 connect ap
    5. ap1 power off and ap2 power on
    6. atrget1 auto connect ap2.
  sub module: WIFI Scan
  summary: reconnect same ssid ap
  test environment: SSC_T1_SCANSPECIFIED
  test point 1: function + stress
  test point 2: reconnect same ssid ap
  version: v2 (2016-11-15)
- CI ready: 'No'
  ID: WIFI_SCAN_5206
  SDK: ESP32_IDF
  Test App: SSC
  auto test: 'Yes'
  category: Stress
  cmd set:
  - WiFiStress/WifiScanOptimize
  - - test_times = 10
    - - ''
  - - test_mode = "quick_conn_ap"
    - - ''
  - - rssi_threshold = 60
    - - ''
  - - low_rssi_num = 1
    - - ''
  execution time: 0.3
  expected result: |-
    1. the routers are configured correctly
    3. connect success
    4. connect to the correct ap
  initial condition: None
  level: Integration
  module: WIFI MAC
  steps: |-
    1. manuall configure two routers with the same ssid password and below rssi_threshold ap's channel at the front
    2. target1 connect PC by Uart.
    3. atrget1 connect ap
    4. check connection ap's bssid
  sub module: WIFI Scan
  summary: quick connect ap
  test environment: SSC_T1_SCANSPECIFIED
  test point 1: function + stress
  test point 2: quick connect ap
  version: v2 (2016-11-15)
