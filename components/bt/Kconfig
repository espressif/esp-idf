menu Bluetooth


    config BT_ENABLED
        bool "Bluetooth"
        help
            Select this option to enable Bluetooth and show the submenu with Bluetooth configuration choices.

    menu "Bluetooth controller"
        visible if BT_ENABLED

        choice BTDM_CTRL_MODE
            prompt "Bluetooth controller mode (BR/EDR/BLE/DUALMODE)"
            depends on BT_ENABLED
            help
                Specify the bluetooth controller mode (BR/EDR, BLE or dual mode).

            config BTDM_CTRL_MODE_BLE_ONLY
                bool "BLE Only"

            config BTDM_CTRL_MODE_BR_EDR_ONLY
                bool "BR/EDR Only"

            config BTDM_CTRL_MODE_BTDM
                bool "Bluetooth Dual Mode"

        endchoice

        config BTDM_CTRL_BLE_MAX_CONN
            int "BLE Max Connections"
            depends on BTDM_CTRL_MODE_BLE_ONLY || BTDM_CTRL_MODE_BTDM
            default 3
            range 1 9
            help
                BLE maximum connections of bluetooth controller.
                Each connection uses 1KB static DRAM whenever the BT controller is enabled.

        config BTDM_CTRL_BR_EDR_MAX_ACL_CONN
            int "BR/EDR ACL Max Connections"
            depends on BTDM_CTRL_MODE_BR_EDR_ONLY || BTDM_CTRL_MODE_BTDM
            default 2
            range 1 7
            help
                BR/EDR ACL maximum connections of bluetooth controller.
                Each connection uses 1.2KB static DRAM whenever the BT controller is enabled.

        config BTDM_CTRL_BR_EDR_MAX_SYNC_CONN
            int "BR/EDR Sync(SCO/eSCO) Max Connections"
            depends on BTDM_CTRL_MODE_BR_EDR_ONLY || BTDM_CTRL_MODE_BTDM
            default 0
            range 0 3
            help
                BR/EDR Synchronize maximum connections of bluetooth controller.
                Each connection uses 2KB static DRAM whenever the BT controller is enabled.

        config BTDM_CTRL_BLE_MAX_CONN_EFF
            int
            default BTDM_CTRL_BLE_MAX_CONN if BTDM_CTRL_MODE_BLE_ONLY || BTDM_CTRL_MODE_BTDM
            default 0

        config BTDM_CTRL_BR_EDR_MAX_ACL_CONN_EFF
            int
            default BTDM_CTRL_BR_EDR_MAX_ACL_CONN if BTDM_CTRL_MODE_BR_EDR_ONLY || BTDM_CTRL_MODE_BTDM
            default 0

        config BTDM_CTRL_BR_EDR_MAX_SYNC_CONN_EFF
            int
            default BTDM_CTRL_BR_EDR_MAX_SYNC_CONN if BTDM_CTRL_MODE_BR_EDR_ONLY || BTDM_CTRL_MODE_BTDM
            default 0

        choice BTDM_CTRL_PINNED_TO_CORE_CHOICE
            prompt "The cpu core which bluetooth controller run"
            depends on BT_ENABLED && !FREERTOS_UNICORE
            help
                Specify the cpu core to run bluetooth controller.
                Can not specify no-affinity.

            config BTDM_CTRL_PINNED_TO_CORE_0
                bool "Core 0 (PRO CPU)"
            config BTDM_CTRL_PINNED_TO_CORE_1
                bool "Core 1 (APP CPU)"
                depends on !FREERTOS_UNICORE
        endchoice

        config BTDM_CTRL_PINNED_TO_CORE
            int
            default 0 if BTDM_CTRL_PINNED_TO_CORE_0
            default 1 if BTDM_CTRL_PINNED_TO_CORE_1
            default 0

        choice BTDM_CTRL_HCI_MODE_CHOICE
            prompt "HCI mode"
            depends on BT_ENABLED
            help
                Speicify HCI mode as VHCI or UART(H4)

            config BTDM_CTRL_HCI_MODE_VHCI
                bool "VHCI"
                help
                    Normal option. Mostly, choose this VHCI when bluetooth host run on ESP32, too.

            config BTDM_CTRL_HCI_MODE_UART_H4
                bool "UART(H4)"
                help
                    If use external bluetooth host which run on other hardware and use UART as the HCI interface,
                    choose this option.
        endchoice

        menu "HCI UART(H4) Options"
            visible if BTDM_CTRL_HCI_MODE_UART_H4

            config BT_HCI_UART_NO
                int "UART Number for HCI"
                depends on BTDM_CTRL_HCI_MODE_UART_H4
                range 1 2
                default 1
                help
                    Uart number for HCI. The available uart is UART1 and UART2.

            config BT_HCI_UART_BAUDRATE
                int "UART Baudrate for HCI"
                depends on BTDM_CTRL_HCI_MODE_UART_H4
                range 115200 921600
                default 921600
                help
                    UART Baudrate for HCI. Please use standard baudrate.

        endmenu

        menu "MODEM SLEEP Options"
            visible if BT_ENABLED

            config BTDM_MODEM_SLEEP
                bool "Bluetooth modem sleep"
                depends on BT_ENABLED
                default y
                help
                    Enable/disable bluetooth controller low power mode.

            choice BTDM_MODEM_SLEEP_MODE
                prompt "Bluetooth Modem sleep mode"
                depends on BTDM_MODEM_SLEEP
                help
                    To select which strategy to use for modem sleep

                config BTDM_MODEM_SLEEP_MODE_ORIG
                    bool "ORIG Mode(sleep with low power clock)"
                    help
                        ORIG mode is a bluetooth sleep mode that can be used for dual mode controller. In this mode,
                        bluetooth controller sleeps between BR/EDR frames and BLE events. A low power clock is used to
                        maintain bluetooth reference clock.

                config BTDM_MODEM_SLEEP_MODE_EVED
                    bool "EVED Mode(For internal test only)"
                    help
                        EVED mode is for BLE only and is only for internal test. Do not use it for production. this
                        mode is not compatible with DFS nor light sleep
            endchoice

            choice BTDM_LOW_POWER_CLOCK
                prompt "Bluetooth low power clock"
                depends on BTDM_MODEM_SLEEP_MODE_ORIG
                help
                    Select the low power clock source for bluetooth controller

                config BTDM_LPCLK_SEL_MAIN_XTAL
                    bool "Main crystal"
                    help
                        Main crystal can be used as low power clock for bluetooth modem sleep. If this option is
                        selected, bluetooth modem sleep can work under Dynamic Frequency Scaling(DFS) enabled, but
                        cannot work when light sleep is enabled. Main crystal has a relatively better performance than
                        other bluetooth low power clock sources.

                config BTDM_LPCLK_SEL_EXT_32K_XTAL
                    bool "External 32kHz crystal"
                    depends on ESP32_RTC_CLK_SRC_EXT_CRYS
            endchoice

        endmenu

        config BTDM_BLE_SCAN_DUPL
            bool "BLE Scan Duplicate Options"
            depends on (BTDM_CTRL_MODE_BTDM || BTDM_CTRL_MODE_BLE_ONLY)
            default y
            help
                This select enables parameters setting of BLE scan duplicate.

        choice BTDM_SCAN_DUPL_TYPE
            prompt "Scan Duplicate Type"
            default BTDM_SCAN_DUPL_TYPE_DEVICE
            depends on BTDM_BLE_SCAN_DUPL
            help
                Scan duplicate have three ways. one is "Scan Duplicate By Device Address", This way is to use
                advertiser address filtering. The adv packet of the same address is only allowed to be reported once.
                Another way is "Scan Duplicate By Device Address And Advertising Data". This way is to use advertising
                data and device address filtering. All different adv packets with the same address are allowed to be
                reported. The last way is "Scan Duplicate By Advertising Data". This way is to use advertising data
                filtering. All same advertising data only allow to be reported once even though they are from
                different devices.

            config BTDM_SCAN_DUPL_TYPE_DEVICE
                bool "Scan Duplicate By Device Address"
                help
                    This way is to use advertiser address filtering. The adv packet of the same address is only
                    allowed to be reported once

            config BTDM_SCAN_DUPL_TYPE_DATA
                bool "Scan Duplicate By Advertising Data"
                help
                    This way is to use advertising data filtering. All same advertising data only allow to be reported
                    once even though they are from different devices.

            config BTDM_SCAN_DUPL_TYPE_DATA_DEVICE
                bool "Scan Duplicate By Device Address And Advertising Data"
                help
                    This way is to use advertising data and device address filtering. All different adv packets with
                    the same address are allowed to be reported.
        endchoice

        config BTDM_SCAN_DUPL_TYPE
            int
            depends on BTDM_BLE_SCAN_DUPL
            default 0 if BTDM_SCAN_DUPL_TYPE_DEVICE
            default 1 if BTDM_SCAN_DUPL_TYPE_DATA
            default 2 if BTDM_SCAN_DUPL_TYPE_DATA_DEVICE
            default 0

        config BTDM_SCAN_DUPL_CACHE_SIZE
            int "Maximum number of devices in scan duplicate filter"
            depends on BTDM_BLE_SCAN_DUPL
            range 10 1000
            default 200
            help
                Maximum number of devices which can be recorded in scan duplicate filter.
                When the maximum amount of device in the filter is reached, the cache will be refreshed.

        config BTDM_BLE_MESH_SCAN_DUPL_EN
            bool "Special duplicate scan mechanism for BLE Mesh scan"
            depends on BTDM_BLE_SCAN_DUPL
            default n
            help
                This enables the BLE scan duplicate for special BLE Mesh scan.

        config BTDM_MESH_DUPL_SCAN_CACHE_SIZE
            int "Maximum number of Mesh adv packets in scan duplicate filter"
            depends on BTDM_BLE_MESH_SCAN_DUPL_EN
            range 10 1000
            default 200
            help
                Maximum number of adv packets which can be recorded in duplicate scan cache for BLE Mesh.
                When the maximum amount of device in the filter is reached, the cache will be refreshed.

        config BTDM_CTRL_FULL_SCAN_SUPPORTED
            bool "BLE full scan feature supported"
            depends on BTDM_CTRL_MODE_BLE_ONLY
            default n
            help
                The full scan function is mainly used to provide BLE scan performance.
                This is required for scenes with high scan performance requirements, such as BLE Mesh scenes.

        config BTDM_BLE_ADV_REPORT_FLOW_CTRL_SUPP
            bool "BLE adv report flow control supported"
            depends on (BTDM_CTRL_MODE_BTDM || BTDM_CTRL_MODE_BLE_ONLY)
            default y
            help
                The function is mainly used to enable flow control for advertising reports. When it is enabled,
                advertising reports will be discarded by the controller if the number of unprocessed advertising
                reports exceeds the size of BLE adv report flow control.

        config BTDM_BLE_ADV_REPORT_FLOW_CTRL_NUM
            int "BLE adv report flow control number"
            depends on BTDM_BLE_ADV_REPORT_FLOW_CTRL_SUPP
            range 50 1000
            default 100
            help
                The number of unprocessed advertising report that Bluedroid can save.If you set
                `BTDM_BLE_ADV_REPORT_FLOW_CTRL_NUM` to a small value, this may cause adv packets lost.
                If you set `BTDM_BLE_ADV_REPORT_FLOW_CTRL_NUM` to a large value, Bluedroid may cache a
                lot of adv packets and this may cause system memory run out. For example, if you set
                it to 50, the maximum memory consumed by host is 35 * 50 bytes. Please set
                `BTDM_BLE_ADV_REPORT_FLOW_CTRL_NUM` according to your system free memory and handle adv
                packets as fast as possible, otherwise it will cause adv packets lost.

        config BTDM_BLE_ADV_REPORT_DISCARD_THRSHOLD
            int "BLE adv lost event threshold value"
            depends on BTDM_BLE_ADV_REPORT_FLOW_CTRL_SUPP
            range 1 1000
            default 20
            help
                When adv report flow control is enabled, The ADV lost event will be generated when the number
                of ADV packets lost in the controller reaches this threshold. It is better to set a larger value.
                If you set `BTDM_BLE_ADV_REPORT_DISCARD_THRSHOLD` to a small value or printf every adv lost event, it
                may cause adv packets lost more.

    endmenu

    menuconfig BT_BLUEDROID_ENABLED
        bool "Bluedroid Enable"
        depends on BTDM_CTRL_HCI_MODE_VHCI
        default y
        help
            This enables the default Bluedroid Bluetooth stack

    choice BT_BLUEDROID_PINNED_TO_CORE_CHOICE
        prompt "The cpu core which Bluedroid run"
        depends on BT_BLUEDROID_ENABLED && !FREERTOS_UNICORE
        help
            Which the cpu core to run Bluedroid. Can choose core0 and core1.
            Can not specify no-affinity.

        config BT_BLUEDROID_PINNED_TO_CORE_0
            bool "Core 0 (PRO CPU)"
        config BT_BLUEDROID_PINNED_TO_CORE_1
            bool "Core 1 (APP CPU)"
            depends on !FREERTOS_UNICORE
    endchoice

    config BT_BLUEDROID_PINNED_TO_CORE
        int
        depends on BT_BLUEDROID_ENABLED
        default 0 if BT_BLUEDROID_PINNED_TO_CORE_0
        default 1 if BT_BLUEDROID_PINNED_TO_CORE_1
        default 0

    config BT_BTC_TASK_STACK_SIZE
        int "Bluetooth event (callback to application) task stack size"
        depends on BT_BLUEDROID_ENABLED
        default 3072
        help
            This select btc task stack size

    config BT_BTU_TASK_STACK_SIZE
        int "Bluetooth Bluedroid Host Stack task stack size"
        depends on BT_BLUEDROID_ENABLED
        default 4096
        help
            This select btu task stack size

    config BT_BLUEDROID_MEM_DEBUG
        bool "Bluedroid memory debug"
        depends on BT_BLUEDROID_ENABLED
        default n
        help
            Bluedroid memory debug

    config BT_CLASSIC_ENABLED
        bool "Classic Bluetooth"
        depends on BT_BLUEDROID_ENABLED
        default n
        help
            For now this option needs "SMP_ENABLE" to be set to yes

    config BT_A2DP_ENABLE
        bool "A2DP"
        depends on BT_CLASSIC_ENABLED
        default n
        help
            Advanced Audio Distrubution Profile

    config BT_A2DP_SINK_TASK_STACK_SIZE
        int "A2DP sink (audio stream decoding) task stack size"
        depends on BT_A2DP_ENABLE
        default 2048

    config BT_A2DP_SOURCE_TASK_STACK_SIZE
        int "A2DP source (audio stream encoding) task stack size"
        depends on BT_A2DP_ENABLE
        default 2048

    config BT_SPP_ENABLED
        bool "SPP"
        depends on BT_CLASSIC_ENABLED
        default n
        help
            This enables the Serial Port Profile

    config BT_HFP_ENABLE
        bool "Hands Free/Handset Profile"
        depends on BT_CLASSIC_ENABLED
        default n

    choice BT_HFP_ROLE
        prompt "Hands-free Profile Role configuration"
        depends on BT_HFP_ENABLE

        config BT_HFP_CLIENT_ENABLE
            bool "Hands Free Unit"
    endchoice

    choice BT_HFP_AUDIO_DATA_PATH
        prompt "audio(SCO) data path"
        depends on BT_HFP_ENABLE

        config BT_HFP_AUDIO_DATA_PATH_PCM
            bool "PCM"
            help
                This enables the Serial Port Profile
        config BT_HFP_AUDIO_DATA_PATH_HCI
            bool "HCI"
            help
                This enables the Serial Port Profile
    endchoice

    config BT_SSP_ENABLED
        bool "Secure Simple Pairing"
        depends on BT_CLASSIC_ENABLED
        default y
        help
            This enables the Secure Simple Pairing. If disable this option, Bluedroid will only support Legacy Pairing

    config BT_GATTS_ENABLE
        bool "Include GATT server module(GATTS)"
        depends on BT_BLUEDROID_ENABLED && (BTDM_CTRL_MODE_BTDM || BTDM_CTRL_MODE_BLE_ONLY)
        default y
        help
            This option can be disabled when the app work only on gatt client mode

    choice BT_GATTS_SEND_SERVICE_CHANGE_MODE
        prompt "GATTS Service Change Mode"
        default BT_GATTS_SEND_SERVICE_CHANGE_AUTO
        depends on BT_GATTS_ENABLE
        help
            Service change indication mode for GATT Server.

        config BT_GATTS_SEND_SERVICE_CHANGE_MANUAL
            bool "GATTS manually send service change indication"
            help
                Manually send service change indication through API esp_ble_gatts_send_service_change_indication()

        config BT_GATTS_SEND_SERVICE_CHANGE_AUTO
            bool "GATTS automatically send service change indication"
            help
                Let Bluedroid handle the service change indication internally

    endchoice

    config BT_GATTS_SEND_SERVICE_CHANGE_MODE
        int
        depends on BT_GATTS_ENABLE
        default 0 if BT_GATTS_SEND_SERVICE_CHANGE_AUTO
        default 1 if BT_GATTS_SEND_SERVICE_CHANGE_MANUAL
        default 0

    config BT_GATTC_ENABLE
        bool "Include GATT client module(GATTC)"
        depends on BT_BLUEDROID_ENABLED && (BTDM_CTRL_MODE_BTDM || BTDM_CTRL_MODE_BLE_ONLY)
        default y
        help
            This option can be close when the app work only on gatt server mode

    config BT_GATTC_CACHE_NVS_FLASH
        bool "Save gattc cache data to nvs flash"
        depends on BT_GATTC_ENABLE && (BTDM_CTRL_MODE_BTDM || BTDM_CTRL_MODE_BLE_ONLY)
        default n
        help
            This select can save gattc cache data to nvs flash

    config BT_BLE_SMP_ENABLE
        bool "Include BLE security module(SMP)"
        depends on BT_BLUEDROID_ENABLED && (BTDM_CTRL_MODE_BTDM || BTDM_CTRL_MODE_BLE_ONLY)
        default y
        help
            This option can be close when the app not used the ble security connect.

    config BT_SMP_SLAVE_CON_PARAMS_UPD_ENABLE
        bool "Slave enable connection parameters update during pairing"
        depends on BT_BLE_SMP_ENABLE
        default n
        help
            In order to reduce the pairing time, slave actively initiates connection parameters update during pairing.

    config BT_STACK_NO_LOG
        bool "Disable BT debug logs (minimize bin size)"
        depends on BT_BLUEDROID_ENABLED
        default n
        help
            This select can save the rodata code size

    menu "BT DEBUG LOG LEVEL"
        depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG

        choice BT_LOG_HCI_TRACE_LEVEL
            prompt "HCI layer"
            default BT_LOG_HCI_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for HCI layer

            config BT_LOG_HCI_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_HCI_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_HCI_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_HCI_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_HCI_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_HCI_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_HCI_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_HCI_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_HCI_TRACE_LEVEL_NONE
            default 1 if BT_LOG_HCI_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_HCI_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_HCI_TRACE_LEVEL_API
            default 4 if BT_LOG_HCI_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_HCI_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_HCI_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_BTM_TRACE_LEVEL
            prompt "BTM layer"
            default BT_LOG_BTM_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for BTM layer

            config BT_LOG_BTM_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_BTM_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_BTM_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_BTM_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_BTM_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_BTM_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_BTM_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_BTM_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_BTM_TRACE_LEVEL_NONE
            default 1 if BT_LOG_BTM_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_BTM_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_BTM_TRACE_LEVEL_API
            default 4 if BT_LOG_BTM_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_BTM_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_BTM_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_L2CAP_TRACE_LEVEL
            prompt "L2CAP layer"
            default BT_LOG_L2CAP_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for L2CAP layer

            config BT_LOG_L2CAP_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_L2CAP_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_L2CAP_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_L2CAP_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_L2CAP_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_L2CAP_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_L2CAP_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_L2CAP_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_L2CAP_TRACE_LEVEL_NONE
            default 1 if BT_LOG_L2CAP_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_L2CAP_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_L2CAP_TRACE_LEVEL_API
            default 4 if BT_LOG_L2CAP_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_L2CAP_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_L2CAP_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_RFCOMM_TRACE_LEVEL
            prompt "RFCOMM layer"
            default BT_LOG_RFCOMM_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for RFCOMM layer

            config BT_LOG_RFCOMM_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_RFCOMM_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_RFCOMM_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_RFCOMM_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_RFCOMM_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_RFCOMM_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_RFCOMM_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_RFCOMM_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_RFCOMM_TRACE_LEVEL_NONE
            default 1 if BT_LOG_RFCOMM_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_RFCOMM_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_RFCOMM_TRACE_LEVEL_API
            default 4 if BT_LOG_RFCOMM_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_RFCOMM_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_RFCOMM_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_SDP_TRACE_LEVEL
            prompt "SDP layer"
            default BT_LOG_SDP_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for SDP layer

            config BT_LOG_SDP_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_SDP_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_SDP_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_SDP_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_SDP_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_SDP_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_SDP_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_SDP_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_SDP_TRACE_LEVEL_NONE
            default 1 if BT_LOG_SDP_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_SDP_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_SDP_TRACE_LEVEL_API
            default 4 if BT_LOG_SDP_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_SDP_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_SDP_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_GAP_TRACE_LEVEL
            prompt "GAP layer"
            default BT_LOG_GAP_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for GAP layer

            config BT_LOG_GAP_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_GAP_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_GAP_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_GAP_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_GAP_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_GAP_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_GAP_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_GAP_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_GAP_TRACE_LEVEL_NONE
            default 1 if BT_LOG_GAP_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_GAP_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_GAP_TRACE_LEVEL_API
            default 4 if BT_LOG_GAP_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_GAP_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_GAP_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_BNEP_TRACE_LEVEL
            prompt "BNEP layer"
            default BT_LOG_BNEP_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for BNEP layer

            config BT_LOG_BNEP_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_BNEP_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_BNEP_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_BNEP_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_BNEP_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_BNEP_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_BNEP_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_BNEP_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_BNEP_TRACE_LEVEL_NONE
            default 1 if BT_LOG_BNEP_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_BNEP_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_BNEP_TRACE_LEVEL_API
            default 4 if BT_LOG_BNEP_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_BNEP_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_BNEP_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_PAN_TRACE_LEVEL
            prompt "PAN layer"
            default BT_LOG_PAN_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for PAN layer

            config BT_LOG_PAN_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_PAN_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_PAN_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_PAN_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_PAN_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_PAN_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_PAN_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_PAN_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_PAN_TRACE_LEVEL_NONE
            default 1 if BT_LOG_PAN_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_PAN_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_PAN_TRACE_LEVEL_API
            default 4 if BT_LOG_PAN_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_PAN_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_PAN_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_A2D_TRACE_LEVEL
            prompt "A2D layer"
            default BT_LOG_A2D_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for A2D layer

            config BT_LOG_A2D_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_A2D_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_A2D_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_A2D_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_A2D_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_A2D_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_A2D_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_A2D_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_A2D_TRACE_LEVEL_NONE
            default 1 if BT_LOG_A2D_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_A2D_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_A2D_TRACE_LEVEL_API
            default 4 if BT_LOG_A2D_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_A2D_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_A2D_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_AVDT_TRACE_LEVEL
            prompt "AVDT layer"
            default BT_LOG_AVDT_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for AVDT layer

            config BT_LOG_AVDT_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_AVDT_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_AVDT_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_AVDT_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_AVDT_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_AVDT_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_AVDT_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_AVDT_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_AVDT_TRACE_LEVEL_NONE
            default 1 if BT_LOG_AVDT_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_AVDT_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_AVDT_TRACE_LEVEL_API
            default 4 if BT_LOG_AVDT_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_AVDT_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_AVDT_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_AVCT_TRACE_LEVEL
            prompt "AVCT layer"
            default BT_LOG_AVCT_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for AVCT layer

            config BT_LOG_AVCT_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_AVCT_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_AVCT_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_AVCT_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_AVCT_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_AVCT_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_AVCT_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_AVCT_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_AVCT_TRACE_LEVEL_NONE
            default 1 if BT_LOG_AVCT_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_AVCT_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_AVCT_TRACE_LEVEL_API
            default 4 if BT_LOG_AVCT_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_AVCT_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_AVCT_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_AVRC_TRACE_LEVEL
            prompt "AVRC layer"
            default BT_LOG_AVRC_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for AVRC layer

            config BT_LOG_AVRC_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_AVRC_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_AVRC_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_AVRC_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_AVRC_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_AVRC_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_AVRC_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_AVRC_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_AVRC_TRACE_LEVEL_NONE
            default 1 if BT_LOG_AVRC_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_AVRC_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_AVRC_TRACE_LEVEL_API
            default 4 if BT_LOG_AVRC_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_AVRC_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_AVRC_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_MCA_TRACE_LEVEL
            prompt "MCA layer"
            default BT_LOG_MCA_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for MCA layer

            config BT_LOG_MCA_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_MCA_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_MCA_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_MCA_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_MCA_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_MCA_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_MCA_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_MCA_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_MCA_TRACE_LEVEL_NONE
            default 1 if BT_LOG_MCA_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_MCA_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_MCA_TRACE_LEVEL_API
            default 4 if BT_LOG_MCA_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_MCA_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_MCA_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_HID_TRACE_LEVEL
            prompt "HID layer"
            default BT_LOG_HID_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for HID layer

            config BT_LOG_HID_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_HID_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_HID_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_HID_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_HID_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_HID_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_HID_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_HID_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_HID_TRACE_LEVEL_NONE
            default 1 if BT_LOG_HID_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_HID_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_HID_TRACE_LEVEL_API
            default 4 if BT_LOG_HID_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_HID_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_HID_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_APPL_TRACE_LEVEL
            prompt "APPL layer"
            default BT_LOG_APPL_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for APPL layer

            config BT_LOG_APPL_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_APPL_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_APPL_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_APPL_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_APPL_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_APPL_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_APPL_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_APPL_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_APPL_TRACE_LEVEL_NONE
            default 1 if BT_LOG_APPL_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_APPL_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_APPL_TRACE_LEVEL_API
            default 4 if BT_LOG_APPL_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_APPL_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_APPL_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_GATT_TRACE_LEVEL
            prompt "GATT layer"
            default BT_LOG_GATT_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for GATT layer

            config BT_LOG_GATT_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_GATT_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_GATT_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_GATT_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_GATT_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_GATT_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_GATT_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_GATT_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_GATT_TRACE_LEVEL_NONE
            default 1 if BT_LOG_GATT_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_GATT_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_GATT_TRACE_LEVEL_API
            default 4 if BT_LOG_GATT_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_GATT_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_GATT_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_SMP_TRACE_LEVEL
            prompt "SMP layer"
            default BT_LOG_SMP_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for SMP layer

            config BT_LOG_SMP_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_SMP_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_SMP_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_SMP_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_SMP_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_SMP_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_SMP_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_SMP_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_SMP_TRACE_LEVEL_NONE
            default 1 if BT_LOG_SMP_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_SMP_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_SMP_TRACE_LEVEL_API
            default 4 if BT_LOG_SMP_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_SMP_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_SMP_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_BTIF_TRACE_LEVEL
            prompt "BTIF layer"
            default BT_LOG_BTIF_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for BTIF layer

            config BT_LOG_BTIF_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_BTIF_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_BTIF_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_BTIF_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_BTIF_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_BTIF_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_BTIF_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_BTIF_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_BTIF_TRACE_LEVEL_NONE
            default 1 if BT_LOG_BTIF_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_BTIF_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_BTIF_TRACE_LEVEL_API
            default 4 if BT_LOG_BTIF_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_BTIF_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_BTIF_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_BTC_TRACE_LEVEL
            prompt "BTC layer"
            default BT_LOG_BTC_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for BTC layer

            config BT_LOG_BTC_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_BTC_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_BTC_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_BTC_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_BTC_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_BTC_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_BTC_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_BTC_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_BTC_TRACE_LEVEL_NONE
            default 1 if BT_LOG_BTC_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_BTC_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_BTC_TRACE_LEVEL_API
            default 4 if BT_LOG_BTC_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_BTC_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_BTC_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_OSI_TRACE_LEVEL
            prompt "OSI layer"
            default BT_LOG_OSI_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for OSI layer

            config BT_LOG_OSI_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_OSI_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_OSI_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_OSI_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_OSI_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_OSI_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_OSI_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_OSI_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_OSI_TRACE_LEVEL_NONE
            default 1 if BT_LOG_OSI_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_OSI_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_OSI_TRACE_LEVEL_API
            default 4 if BT_LOG_OSI_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_OSI_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_OSI_TRACE_LEVEL_VERBOSE
            default 2

        choice BT_LOG_BLUFI_TRACE_LEVEL
            prompt "BLUFI layer"
            default BT_LOG_BLUFI_TRACE_LEVEL_WARNING
            depends on BT_BLUEDROID_ENABLED && !BT_STACK_NO_LOG
            help
                Define BT trace level for BLUFI layer

            config BT_LOG_BLUFI_TRACE_LEVEL_NONE
                bool "NONE"
            config BT_LOG_BLUFI_TRACE_LEVEL_ERROR
                bool "ERROR"
            config BT_LOG_BLUFI_TRACE_LEVEL_WARNING
                bool "WARNING"
            config BT_LOG_BLUFI_TRACE_LEVEL_API
                bool "API"
            config BT_LOG_BLUFI_TRACE_LEVEL_EVENT
                bool "EVENT"
            config BT_LOG_BLUFI_TRACE_LEVEL_DEBUG
                bool "DEBUG"
            config BT_LOG_BLUFI_TRACE_LEVEL_VERBOSE
                bool "VERBOSE"
        endchoice

        config BT_LOG_BLUFI_TRACE_LEVEL
            int
            depends on BT_BLUEDROID_ENABLED
            default 0 if BT_LOG_BLUFI_TRACE_LEVEL_NONE
            default 1 if BT_LOG_BLUFI_TRACE_LEVEL_ERROR
            default 2 if BT_LOG_BLUFI_TRACE_LEVEL_WARNING
            default 3 if BT_LOG_BLUFI_TRACE_LEVEL_API
            default 4 if BT_LOG_BLUFI_TRACE_LEVEL_EVENT
            default 5 if BT_LOG_BLUFI_TRACE_LEVEL_DEBUG
            default 6 if BT_LOG_BLUFI_TRACE_LEVEL_VERBOSE
            default 2

    endmenu #BT DEBUG LOG LEVEL


    config BT_ACL_CONNECTIONS
        int "BT/BLE MAX ACL CONNECTIONS(1~7)"
        depends on BT_BLUEDROID_ENABLED
        range 1 7
        default 4
        help
            Maximum BT/BLE connection count

    config BT_ALLOCATION_FROM_SPIRAM_FIRST
        bool "BT/BLE will first malloc the memory from the PSRAM"
        depends on BT_BLUEDROID_ENABLED
        default n
        help
            This select can save the internal RAM if there have the PSRAM

    config BT_BLE_DYNAMIC_ENV_MEMORY
        bool "Use dynamic memory allocation in BT/BLE stack"
        depends on BT_BLUEDROID_ENABLED
        default n
        help
            This select can make the allocation of memory will become more flexible

    config BT_BLE_HOST_QUEUE_CONG_CHECK
        bool "BLE queue congestion check"
        depends on BT_BLUEDROID_ENABLED
        default n
        help
            When scanning and scan duplicate is not enabled, if there are a lot of adv packets around or application
            layer handling adv packets is slow, it will cause the controller memory to run out. if enabled, adv
            packets will be lost when host queue is congested.

    config BT_SMP_ENABLE
        bool
        depends on BT_BLUEDROID_ENABLED
        default BT_CLASSIC_ENABLED || BT_BLE_SMP_ENABLE

    config BT_BLE_ACT_SCAN_REP_ADV_SCAN
        bool "Report adv data and scan response individually when BLE active scan"
        depends on BT_BLUEDROID_ENABLED && (BTDM_CTRL_MODE_BTDM || BTDM_CTRL_MODE_BLE_ONLY)
        default n
        help
            Originally, when doing BLE active scan, Bluedroid will not report adv to application layer
            until receive scan response. This option is used to disable the behavior. When enable this option,
            Bluedroid will report adv data or scan response to application layer immediately.

            # Memory reserved at start of DRAM for Bluetooth stack

    config BT_BLE_ESTAB_LINK_CONN_TOUT
        int "Timeout of BLE connection establishment"
        depends on BT_BLUEDROID_ENABLED
        range 1 60
        default 30
        help
            Bluetooth Connection establishment maximum time, if connection time exceeds this value, the connection
            establishment fails, ESP_GATTC_OPEN_EVT or ESP_GATTS_OPEN_EVT is triggered.

    config BT_RESERVE_DRAM
        hex
        default 0xdb5c if BT_ENABLED
        default 0

endmenu
