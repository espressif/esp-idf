stages:
  - build
  - assign_test
  - host_test
  - target_test
  - check
  - deploy
  - post_check

variables:
# System environment

  # Common parameters for the 'make' during CI tests
  MAKEFLAGS: "-j5 --no-keep-going"

# GitLab-CI environment

  # more attempts for more robust
  GET_SOURCES_ATTEMPTS: "10"
  ARTIFACT_DOWNLOAD_ATTEMPTS: "10"

  # GIT_STRATEGY is not defined here.
  # Use an option from  "CI / CD Settings" - "General pipelines".

  # "normal" strategy for fetching only top-level submodules since nothing requires the sub-submodules code for building IDF.
  # If the "recursive" strategy is used we have a problem with using relative URLs for sub-submodules.
  GIT_SUBMODULE_STRATEGY: normal

  UNIT_TEST_BUILD_SYSTEM: cmake
  EXAMPLE_TEST_BUILD_SYSTEM: cmake
# IDF environment

  IDF_PATH: "$CI_PROJECT_DIR"
  BATCH_BUILD: "1"
  V: "0"
  APPLY_BOT_FILTER_SCRIPT: "$CI_PROJECT_DIR/tools/ci/apply_bot_filter.py"
  CHECKOUT_REF_SCRIPT: "$CI_PROJECT_DIR/tools/ci/checkout_project_ref.py"
  CUSTOM_TOOLCHAIN_PATH: "/opt/xtensa-custom"

# Docker images
  BOT_DOCKER_IMAGE_TAG: ":latest"
# target test config file, used by assign test job
  CI_TARGET_TEST_CONFIG_FILE: "$CI_PROJECT_DIR/tools/ci/config/target-test.yml"


# before each job, we need to check if this job is filtered by bot stage/job filter
.apply_bot_filter: &apply_bot_filter
  python $APPLY_BOT_FILTER_SCRIPT || exit 0

.setup_custom_toolchain: &setup_custom_toolchain |
  if [ "$IDF_XTENSA_TOOLCHAIN_URL" ] ; then
  echo "Use a custom toolchain: ${IDF_XTENSA_TOOLCHAIN_URL:-Unknown}"
  rm -rf "$CUSTOM_TOOLCHAIN_PATH" &&
  mkdir -p -v "$CUSTOM_TOOLCHAIN_PATH" &&
  pushd "$CUSTOM_TOOLCHAIN_PATH" &&
  curl -sSL -o xtensa-custom.xxx "$IDF_XTENSA_TOOLCHAIN_URL" &&
  ls -l xtensa-custom.xxx &&
  tar xf xtensa-custom.xxx --strip-components 1 &&
  ls -l . &&
  popd
  PATH=$CUSTOM_TOOLCHAIN_PATH/bin:$PATH
  export PATH
  fi

.cleanup_custom_toolchain: &cleanup_custom_toolchain |
  echo "Cleaning up $CUSTOM_TOOLCHAIN_PATH"
  rm -rf "$CUSTOM_TOOLCHAIN_PATH"

.setup_tools_unless_target_test: &setup_tools_unless_target_test |
  if [[ "$SETUP_TOOLS" == "1" || "$CI_JOB_STAGE" != "target_test" ]]; then
  tools/idf_tools.py --non-interactive install && eval "$(tools/idf_tools.py --non-interactive export)" || exit 1
  fi

.show_submodule_urls: &show_submodule_urls |
  git config --get-regexp '^submodule\..*\.url$' || true

before_script:
  - echo "Running common script"
  - *show_submodule_urls
  - source tools/ci/setup_python.sh
  # apply bot filter in before script
  - *apply_bot_filter
  # add gitlab ssh key
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo -n $GITLAB_KEY > ~/.ssh/id_rsa_base64
  - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
  # Set some options and environment for CI
  - source tools/ci/configure_ci_environment.sh

  - *setup_tools_unless_target_test

  - *setup_custom_toolchain

# used for check scripts which we want to run unconditionally
.before_script_lesser_nofilter:
  variables:
    GIT_SUBMODULE_STRATEGY: none
  before_script:
    - echo "Not setting up GitLab key, not fetching submodules, not applying bot filter"
    - source tools/ci/setup_python.sh
    - source tools/ci/configure_ci_environment.sh
    - *setup_custom_toolchain

# used for everything else where we want to do no prep, except for bot filter
.before_script_lesser:
  variables:
    GIT_SUBMODULE_STRATEGY: none
  before_script:
    - echo "Not setting up GitLab key, not fetching submodules"
    - source tools/ci/setup_python.sh
    # apply bot filter in before script
    - *apply_bot_filter
    - source tools/ci/configure_ci_environment.sh
    - *setup_custom_toolchain

after_script:
  - *cleanup_custom_toolchain

.check_job_template:
  stage: check
  image: $CI_DOCKER_REGISTRY/esp32-ci-env$BOT_DOCKER_IMAGE_TAG
  tags:
    - host_test
  dependencies: []
  extends: .before_script_lesser_nofilter

.check_job_template_with_filter:
  stage: check
  image: $CI_DOCKER_REGISTRY/esp32-ci-env$BOT_DOCKER_IMAGE_TAG
  tags:
    - host_test
  dependencies: []
  extends: .before_script_lesser_nofilter

include:
  - '/tools/ci/config/build.yml'
  - '/tools/ci/config/assign-test.yml'
  - '/tools/ci/config/host-test.yml'
  - '/tools/ci/config/target-test.yml'
  - '/tools/ci/config/check.yml'
  - '/tools/ci/config/deploy.yml'
